
AutomatedSmartParkingProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002618  08002618  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002618  08002618  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002618  08002618  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002620  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000004  08002624  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002624  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f55  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001437  00000000  00000000  00027f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001136  00000000  00000000  000293b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e0  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000238  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003076  00000000  00000000  0002aa08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004524  00000000  00000000  0002da7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a928  00000000  00000000  00031fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003c8ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008f8  00000000  00000000  0003c948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08002490 	.word	0x08002490

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08002490 	.word	0x08002490

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <KPD_init>:




ES_t KPD_init()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0


	// Rows

	// R1 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R1;
 800018a:	2301      	movs	r3, #1
 800018c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800018e:	2304      	movs	r3, #4
 8000190:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 8000192:	2302      	movs	r3, #2
 8000194:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	482c      	ldr	r0, [pc, #176]	; (800024c <KPD_init+0xc8>)
 800019c:	f001 fdfc 	bl	8001d98 <MCAL_GPIO_Init>

	// R2 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R2;
 80001a0:	2302      	movs	r3, #2
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 80001a8:	2302      	movs	r3, #2
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4826      	ldr	r0, [pc, #152]	; (800024c <KPD_init+0xc8>)
 80001b2:	f001 fdf1 	bl	8001d98 <MCAL_GPIO_Init>

	// R3 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R3;
 80001b6:	2308      	movs	r3, #8
 80001b8:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001ba:	2304      	movs	r3, #4
 80001bc:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 80001be:	2302      	movs	r3, #2
 80001c0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4821      	ldr	r0, [pc, #132]	; (800024c <KPD_init+0xc8>)
 80001c8:	f001 fde6 	bl	8001d98 <MCAL_GPIO_Init>

	// R4 output push pull mode
	PinCfg.GPIO_PinNumber = KPD_U8_R4;
 80001cc:	2310      	movs	r3, #16
 80001ce:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80001d0:	2304      	movs	r3, #4
 80001d2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ;
 80001d4:	2302      	movs	r3, #2
 80001d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_U8_PORTROWS, &PinCfg);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4619      	mov	r1, r3
 80001dc:	481b      	ldr	r0, [pc, #108]	; (800024c <KPD_init+0xc8>)
 80001de:	f001 fddb 	bl	8001d98 <MCAL_GPIO_Init>


	// Columns

	// C1 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C1;
 80001e2:	2380      	movs	r3, #128	; 0x80
 80001e4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80001e6:	2303      	movs	r3, #3
 80001e8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4619      	mov	r1, r3
 80001ee:	4817      	ldr	r0, [pc, #92]	; (800024c <KPD_init+0xc8>)
 80001f0:	f001 fdd2 	bl	8001d98 <MCAL_GPIO_Init>

	// C2 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C2;
 80001f4:	2340      	movs	r3, #64	; 0x40
 80001f6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 80001f8:	2303      	movs	r3, #3
 80001fa:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4812      	ldr	r0, [pc, #72]	; (800024c <KPD_init+0xc8>)
 8000202:	f001 fdc9 	bl	8001d98 <MCAL_GPIO_Init>

	// C3 input pull down mode
	PinCfg.GPIO_PinNumber = KPD_U8_C3;
 8000206:	2320      	movs	r3, #32
 8000208:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 800020a:	2303      	movs	r3, #3
 800020c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_U8_PORTCOLS, &PinCfg);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4619      	mov	r1, r3
 8000212:	480e      	ldr	r0, [pc, #56]	; (800024c <KPD_init+0xc8>)
 8000214:	f001 fdc0 	bl	8001d98 <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R1, GPIO_PIN_LOW);
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	480b      	ldr	r0, [pc, #44]	; (800024c <KPD_init+0xc8>)
 800021e:	f001 fe51 	bl	8001ec4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R2, GPIO_PIN_LOW);
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	4809      	ldr	r0, [pc, #36]	; (800024c <KPD_init+0xc8>)
 8000228:	f001 fe4c 	bl	8001ec4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R3, GPIO_PIN_LOW);
 800022c:	2200      	movs	r2, #0
 800022e:	2108      	movs	r1, #8
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <KPD_init+0xc8>)
 8000232:	f001 fe47 	bl	8001ec4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_U8_PORTROWS, KPD_U8_R4, GPIO_PIN_LOW);
 8000236:	2200      	movs	r2, #0
 8000238:	2110      	movs	r1, #16
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <KPD_init+0xc8>)
 800023c:	f001 fe42 	bl	8001ec4 <MCAL_GPIO_WritePin>



	return ES_OK;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010c00 	.word	0x40010c00

08000250 <KPD_ES_tGetKeyPressed>:


// -------------------------------------------------------------------------------------------- //

ES_t KPD_ES_tGetKeyPressed(uint8_t *copy_pu8ReturnedKey)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	22ff      	movs	r2, #255	; 0xff
 800025c:	701a      	strb	r2, [r3, #0]
	uint8_t Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = GPIO_PIN_HIGH;
 800025e:	2301      	movs	r3, #1
 8000260:	733b      	strb	r3, [r7, #12]
	if(copy_pu8ReturnedKey != NULL)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d05d      	beq.n	8000324 <KPD_ES_tGetKeyPressed+0xd4>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
 8000268:	2300      	movs	r3, #0
 800026a:	73fb      	strb	r3, [r7, #15]
 800026c:	e056      	b.n	800031c <KPD_ES_tGetKeyPressed+0xcc>
		{
			// Activate row
			MCAL_GPIO_WritePin(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],GPIO_PIN_HIGH);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	4a30      	ldr	r2, [pc, #192]	; (8000334 <KPD_ES_tGetKeyPressed+0xe4>)
 8000272:	5cd3      	ldrb	r3, [r2, r3]
 8000274:	b29b      	uxth	r3, r3
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	482f      	ldr	r0, [pc, #188]	; (8000338 <KPD_ES_tGetKeyPressed+0xe8>)
 800027c:	f001 fe22 	bl	8001ec4 <MCAL_GPIO_WritePin>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
 8000280:	2300      	movs	r3, #0
 8000282:	73bb      	strb	r3, [r7, #14]
 8000284:	e038      	b.n	80002f8 <KPD_ES_tGetKeyPressed+0xa8>
			{
				Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);
 8000286:	7bbb      	ldrb	r3, [r7, #14]
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <KPD_ES_tGetKeyPressed+0xec>)
 800028a:	5cd3      	ldrb	r3, [r2, r3]
 800028c:	b29b      	uxth	r3, r3
 800028e:	4619      	mov	r1, r3
 8000290:	4829      	ldr	r0, [pc, #164]	; (8000338 <KPD_ES_tGetKeyPressed+0xe8>)
 8000292:	f001 fe00 	bl	8001e96 <MCAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	737b      	strb	r3, [r7, #13]
				if(Local_u8PinVal == GPIO_PIN_HIGH){ /* Switch is pressed */
 800029a:	7b7b      	ldrb	r3, [r7, #13]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d128      	bne.n	80002f2 <KPD_ES_tGetKeyPressed+0xa2>
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					wait_ms(20);   // Debouncing
 80002a0:	2014      	movs	r0, #20
 80002a2:	f000 f95f 	bl	8000564 <wait_ms>
					// Check if the pin is still low "problem of multiple display"
					Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);  // Update the PinVal
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	4a24      	ldr	r2, [pc, #144]	; (800033c <KPD_ES_tGetKeyPressed+0xec>)
 80002aa:	5cd3      	ldrb	r3, [r2, r3]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	4619      	mov	r1, r3
 80002b0:	4821      	ldr	r0, [pc, #132]	; (8000338 <KPD_ES_tGetKeyPressed+0xe8>)
 80002b2:	f001 fdf0 	bl	8001e96 <MCAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	737b      	strb	r3, [r7, #13]
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == GPIO_PIN_HIGH){
 80002ba:	e009      	b.n	80002d0 <KPD_ES_tGetKeyPressed+0x80>
						// Continues reading until the value equals high
						Local_u8PinVal = MCAL_GPIO_ReadPin(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter]);   // Update the PinVal
 80002bc:	7bbb      	ldrb	r3, [r7, #14]
 80002be:	4a1f      	ldr	r2, [pc, #124]	; (800033c <KPD_ES_tGetKeyPressed+0xec>)
 80002c0:	5cd3      	ldrb	r3, [r2, r3]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	481c      	ldr	r0, [pc, #112]	; (8000338 <KPD_ES_tGetKeyPressed+0xe8>)
 80002c8:	f001 fde5 	bl	8001e96 <MCAL_GPIO_ReadPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	737b      	strb	r3, [r7, #13]
					while(Local_u8PinVal == GPIO_PIN_HIGH){
 80002d0:	7b7b      	ldrb	r3, [r7, #13]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d0f2      	beq.n	80002bc <KPD_ES_tGetKeyPressed+0x6c>
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
 80002d6:	7bfa      	ldrb	r2, [r7, #15]
 80002d8:	7bb9      	ldrb	r1, [r7, #14]
 80002da:	4819      	ldr	r0, [pc, #100]	; (8000340 <KPD_ES_tGetKeyPressed+0xf0>)
 80002dc:	4613      	mov	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	4403      	add	r3, r0
 80002e4:	440b      	add	r3, r1
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	701a      	strb	r2, [r3, #0]
					Local_u8Flag = GPIO_PIN_LOW;
 80002ec:	2300      	movs	r3, #0
 80002ee:	733b      	strb	r3, [r7, #12]
					break;
 80002f0:	e005      	b.n	80002fe <KPD_ES_tGetKeyPressed+0xae>
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
 80002f2:	7bbb      	ldrb	r3, [r7, #14]
 80002f4:	3301      	adds	r3, #1
 80002f6:	73bb      	strb	r3, [r7, #14]
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
 80002fa:	2b02      	cmp	r3, #2
 80002fc:	d9c3      	bls.n	8000286 <KPD_ES_tGetKeyPressed+0x36>
				}
			}
			// Deactivate ROW
			MCAL_GPIO_WritePin(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],GPIO_PIN_LOW);
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <KPD_ES_tGetKeyPressed+0xe4>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	b29b      	uxth	r3, r3
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <KPD_ES_tGetKeyPressed+0xe8>)
 800030c:	f001 fdda 	bl	8001ec4 <MCAL_GPIO_WritePin>
			if(Local_u8Flag == GPIO_PIN_LOW)
 8000310:	7b3b      	ldrb	r3, [r7, #12]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d008      	beq.n	8000328 <KPD_ES_tGetKeyPressed+0xd8>
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	3301      	adds	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d9a5      	bls.n	800026e <KPD_ES_tGetKeyPressed+0x1e>
 8000322:	e002      	b.n	800032a <KPD_ES_tGetKeyPressed+0xda>
				break;
		}


	}else{
		return ES_NOT_OK;
 8000324:	2301      	movs	r3, #1
 8000326:	e001      	b.n	800032c <KPD_ES_tGetKeyPressed+0xdc>
				break;
 8000328:	bf00      	nop
	}
	return ES_OK;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	080025f8 	.word	0x080025f8
 8000338:	40010c00 	.word	0x40010c00
 800033c:	080025fc 	.word	0x080025fc
 8000340:	080025ec 	.word	0x080025ec

08000344 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(LCD_Instant instant);
static ES_t LCD_ES_tSet_Cursor_Pos(LCD_Instant instant,uint8_t row,uint8_t column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(LCD_Instant instant){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	switch(instant){
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <LCD_ES_tTrigger_Enable+0x16>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d013      	beq.n	8000380 <LCD_ES_tTrigger_Enable+0x3c>
 8000358:	e023      	b.n	80003a2 <LCD_ES_tTrigger_Enable+0x5e>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, EN_1, GPIO_PIN_HIGH);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <LCD_ES_tTrigger_Enable+0x68>)
 8000362:	f001 fdaf 	bl	8001ec4 <MCAL_GPIO_WritePin>
		wait_ms(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 f8fc 	bl	8000564 <wait_ms>
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, EN_1, GPIO_PIN_LOW);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <LCD_ES_tTrigger_Enable+0x68>)
 8000374:	f001 fda6 	bl	8001ec4 <MCAL_GPIO_WritePin>
		wait_ms(2);
 8000378:	2002      	movs	r0, #2
 800037a:	f000 f8f3 	bl	8000564 <wait_ms>
		break;
 800037e:	e010      	b.n	80003a2 <LCD_ES_tTrigger_Enable+0x5e>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, EN_2, GPIO_PIN_HIGH);
 8000380:	2201      	movs	r2, #1
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	480a      	ldr	r0, [pc, #40]	; (80003b0 <LCD_ES_tTrigger_Enable+0x6c>)
 8000386:	f001 fd9d 	bl	8001ec4 <MCAL_GPIO_WritePin>
		wait_ms(1);
 800038a:	2001      	movs	r0, #1
 800038c:	f000 f8ea 	bl	8000564 <wait_ms>
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, EN_2, GPIO_PIN_LOW);
 8000390:	2200      	movs	r2, #0
 8000392:	2140      	movs	r1, #64	; 0x40
 8000394:	4806      	ldr	r0, [pc, #24]	; (80003b0 <LCD_ES_tTrigger_Enable+0x6c>)
 8000396:	f001 fd95 	bl	8001ec4 <MCAL_GPIO_WritePin>
		wait_ms(2);
 800039a:	2002      	movs	r0, #2
 800039c:	f000 f8e2 	bl	8000564 <wait_ms>
		break;
 80003a0:	bf00      	nop
	}
	}

	return ES_OK;
 80003a2:	2300      	movs	r3, #0
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	40010800 	.word	0x40010800

080003b4 <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(LCD_Instant instant){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]

	GPIO_PinConfig_t PinCfg;

	switch(instant){
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <Lcd_ES_tInit+0x16>
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d063      	beq.n	8000490 <Lcd_ES_tInit+0xdc>
 80003c8:	e0c3      	b.n	8000552 <Lcd_ES_tInit+0x19e>
	{

		// Pins Configuration for LCD

		// RS output push pull mode
		PinCfg.GPIO_PinNumber = RS_1;
 80003ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003ce:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80003d0:	2304      	movs	r3, #4
 80003d2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80003d4:	2301      	movs	r3, #1
 80003d6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_CMD_PORT, &PinCfg);
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	4619      	mov	r1, r3
 80003de:	485f      	ldr	r0, [pc, #380]	; (800055c <Lcd_ES_tInit+0x1a8>)
 80003e0:	f001 fcda 	bl	8001d98 <MCAL_GPIO_Init>

		// EN output push pull mode
		PinCfg.GPIO_PinNumber = EN_1;
 80003e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80003ea:	2304      	movs	r3, #4
 80003ec:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80003ee:	2301      	movs	r3, #1
 80003f0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_CMD_PORT, &PinCfg);
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	4858      	ldr	r0, [pc, #352]	; (800055c <Lcd_ES_tInit+0x1a8>)
 80003fa:	f001 fccd 	bl	8001d98 <MCAL_GPIO_Init>

		// D4 output push pull mode
		PinCfg.GPIO_PinNumber = D4_1;
 80003fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000402:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000404:	2304      	movs	r3, #4
 8000406:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000408:	2301      	movs	r3, #1
 800040a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	4619      	mov	r1, r3
 8000412:	4852      	ldr	r0, [pc, #328]	; (800055c <Lcd_ES_tInit+0x1a8>)
 8000414:	f001 fcc0 	bl	8001d98 <MCAL_GPIO_Init>

		// D5 output push pull mode
		PinCfg.GPIO_PinNumber = D5_1;
 8000418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800041e:	2304      	movs	r3, #4
 8000420:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000422:	2301      	movs	r3, #1
 8000424:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4619      	mov	r1, r3
 800042c:	484b      	ldr	r0, [pc, #300]	; (800055c <Lcd_ES_tInit+0x1a8>)
 800042e:	f001 fcb3 	bl	8001d98 <MCAL_GPIO_Init>

		// D6 output push pull mode
		PinCfg.GPIO_PinNumber = D6_1;
 8000432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000436:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000438:	2304      	movs	r3, #4
 800043a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800043c:	2301      	movs	r3, #1
 800043e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	4619      	mov	r1, r3
 8000446:	4845      	ldr	r0, [pc, #276]	; (800055c <Lcd_ES_tInit+0x1a8>)
 8000448:	f001 fca6 	bl	8001d98 <MCAL_GPIO_Init>

		// D7 output push pull mode
		PinCfg.GPIO_PinNumber = D7_1;
 800044c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000450:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000452:	2304      	movs	r3, #4
 8000454:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000456:	2301      	movs	r3, #1
 8000458:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_1_DATA_PORT, &PinCfg);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4619      	mov	r1, r3
 8000460:	483e      	ldr	r0, [pc, #248]	; (800055c <Lcd_ES_tInit+0x1a8>)
 8000462:	f001 fc99 	bl	8001d98 <MCAL_GPIO_Init>


		Lcd_ES_tsendCmd(LCD_Instant_1,Four_BitMode);   /* Go into 4-bit operating mode*/
 8000466:	2102      	movs	r1, #2
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f8b5 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
 800046e:	2128      	movs	r1, #40	; 0x28
 8000470:	2000      	movs	r0, #0
 8000472:	f000 f8b1 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,CursorON);  /* Display on cursor off */
 8000476:	210e      	movs	r1, #14
 8000478:	2000      	movs	r0, #0
 800047a:	f000 f8ad 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,IncrCursor);  /* Increment cursor (shift cursor to right) */
 800047e:	2106      	movs	r1, #6
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f8a9 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_1,CLR_Display);  /* Clear display screen */
 8000486:	2101      	movs	r1, #1
 8000488:	2000      	movs	r0, #0
 800048a:	f000 f8a5 	bl	80005d8 <Lcd_ES_tsendCmd>


		break;
 800048e:	e060      	b.n	8000552 <Lcd_ES_tInit+0x19e>
	{

		// Pins Configuration for LCD

		// RS output push pull mode
		PinCfg.GPIO_PinNumber = RS_2;
 8000490:	2320      	movs	r3, #32
 8000492:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000494:	2304      	movs	r3, #4
 8000496:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_CMD_PORT, &PinCfg);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	482f      	ldr	r0, [pc, #188]	; (8000560 <Lcd_ES_tInit+0x1ac>)
 80004a4:	f001 fc78 	bl	8001d98 <MCAL_GPIO_Init>

		// EN output push pull mode
		PinCfg.GPIO_PinNumber = EN_2;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004ac:	2304      	movs	r3, #4
 80004ae:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_CMD_PORT, &PinCfg);
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	4619      	mov	r1, r3
 80004ba:	4829      	ldr	r0, [pc, #164]	; (8000560 <Lcd_ES_tInit+0x1ac>)
 80004bc:	f001 fc6c 	bl	8001d98 <MCAL_GPIO_Init>

		// D4 output push pull mode
		PinCfg.GPIO_PinNumber = D4_2;
 80004c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004c6:	2304      	movs	r3, #4
 80004c8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004ca:	2301      	movs	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4822      	ldr	r0, [pc, #136]	; (8000560 <Lcd_ES_tInit+0x1ac>)
 80004d6:	f001 fc5f 	bl	8001d98 <MCAL_GPIO_Init>

		// D5 output push pull mode
		PinCfg.GPIO_PinNumber = D5_2;
 80004da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004de:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004e0:	2304      	movs	r3, #4
 80004e2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004e4:	2301      	movs	r3, #1
 80004e6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	481c      	ldr	r0, [pc, #112]	; (8000560 <Lcd_ES_tInit+0x1ac>)
 80004f0:	f001 fc52 	bl	8001d98 <MCAL_GPIO_Init>

		// D6 output push pull mode
		PinCfg.GPIO_PinNumber = D6_2;
 80004f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004f8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 80004fa:	2304      	movs	r3, #4
 80004fc:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004fe:	2301      	movs	r3, #1
 8000500:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	4619      	mov	r1, r3
 8000508:	4815      	ldr	r0, [pc, #84]	; (8000560 <Lcd_ES_tInit+0x1ac>)
 800050a:	f001 fc45 	bl	8001d98 <MCAL_GPIO_Init>

		// D7 output push pull mode
		PinCfg.GPIO_PinNumber = D7_2;
 800050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000512:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000514:	2304      	movs	r3, #4
 8000516:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(LCD_2_DATA_PORT, &PinCfg);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <Lcd_ES_tInit+0x1ac>)
 8000524:	f001 fc38 	bl	8001d98 <MCAL_GPIO_Init>


		Lcd_ES_tsendCmd(LCD_Instant_2,Four_BitMode);   /* Go into 4-bit operating mode*/
 8000528:	2102      	movs	r1, #2
 800052a:	2001      	movs	r0, #1
 800052c:	f000 f854 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
 8000530:	2128      	movs	r1, #40	; 0x28
 8000532:	2001      	movs	r0, #1
 8000534:	f000 f850 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,CursorON);  /* Display on cursor off */
 8000538:	210e      	movs	r1, #14
 800053a:	2001      	movs	r0, #1
 800053c:	f000 f84c 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,IncrCursor);  /* Increment cursor (shift cursor to right) */
 8000540:	2106      	movs	r1, #6
 8000542:	2001      	movs	r0, #1
 8000544:	f000 f848 	bl	80005d8 <Lcd_ES_tsendCmd>
		Lcd_ES_tsendCmd(LCD_Instant_2,CLR_Display);  /* Clear display screen */
 8000548:	2101      	movs	r1, #1
 800054a:	2001      	movs	r0, #1
 800054c:	f000 f844 	bl	80005d8 <Lcd_ES_tsendCmd>


		break;
 8000550:	bf00      	nop
	}
	}


	return ES_OK;
 8000552:	2300      	movs	r3, #0

}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40010c00 	.word	0x40010c00
 8000560:	40010800 	.word	0x40010800

08000564 <wait_ms>:
 *
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

void wait_ms(uint32_t time){
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e00b      	b.n	800058a <wait_ms+0x26>
		for(j=0;j<255;j++);
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	e002      	b.n	800057e <wait_ms+0x1a>
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	3301      	adds	r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	2bfe      	cmp	r3, #254	; 0xfe
 8000582:	d9f9      	bls.n	8000578 <wait_ms+0x14>
	for(i=0;i<time;i++)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	d3ef      	bcc.n	8000572 <wait_ms+0xe>
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <lcd_ES_tclear>:

ES_t lcd_ES_tclear(LCD_Instant instant)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	switch(instant){
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <lcd_ES_tclear+0x16>
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d005      	beq.n	80005bc <lcd_ES_tclear+0x20>
 80005b0:	e009      	b.n	80005c6 <lcd_ES_tclear+0x2a>
	case LCD_Instant_1:
	{
		Lcd_ES_tsendCmd(LCD_Instant_1,CLR_Display);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f80f 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 80005ba:	e004      	b.n	80005c6 <lcd_ES_tclear+0x2a>
	}
	case LCD_Instant_2:
	{
		Lcd_ES_tsendCmd(LCD_Instant_2,CLR_Display);
 80005bc:	2101      	movs	r1, #1
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f80a 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 80005c4:	bf00      	nop
	}
	}


	wait_ms(2);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f7ff ffcc 	bl	8000564 <wait_ms>
	return ES_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(LCD_Instant instant, uint8_t cmd){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]

	switch(instant){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d003      	beq.n	80005f6 <Lcd_ES_tsendCmd+0x1e>
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	f000 80ac 	beq.w	800074c <Lcd_ES_tsendCmd+0x174>
 80005f4:	e154      	b.n	80008a0 <Lcd_ES_tsendCmd+0x2c8>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_LOW);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fc:	48ab      	ldr	r0, [pc, #684]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 80005fe:	f001 fc61 	bl	8001ec4 <MCAL_GPIO_WritePin>


		(GET_BIT(cmd,7)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	09db      	lsrs	r3, r3, #7
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d006      	beq.n	800061e <Lcd_ES_tsendCmd+0x46>
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000616:	48a5      	ldr	r0, [pc, #660]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000618:	f001 fc54 	bl	8001ec4 <MCAL_GPIO_WritePin>
 800061c:	e005      	b.n	800062a <Lcd_ES_tsendCmd+0x52>
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000624:	48a1      	ldr	r0, [pc, #644]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000626:	f001 fc4d 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,6)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	099b      	lsrs	r3, r3, #6
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d006      	beq.n	8000646 <Lcd_ES_tsendCmd+0x6e>
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	489b      	ldr	r0, [pc, #620]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000640:	f001 fc40 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000644:	e005      	b.n	8000652 <Lcd_ES_tsendCmd+0x7a>
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064c:	4897      	ldr	r0, [pc, #604]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 800064e:	f001 fc39 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,5)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	095b      	lsrs	r3, r3, #5
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b00      	cmp	r3, #0
 800065e:	d006      	beq.n	800066e <Lcd_ES_tsendCmd+0x96>
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4891      	ldr	r0, [pc, #580]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000668:	f001 fc2c 	bl	8001ec4 <MCAL_GPIO_WritePin>
 800066c:	e005      	b.n	800067a <Lcd_ES_tsendCmd+0xa2>
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	488d      	ldr	r0, [pc, #564]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000676:	f001 fc25 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,4)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <Lcd_ES_tsendCmd+0xbe>
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068e:	4887      	ldr	r0, [pc, #540]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000690:	f001 fc18 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000694:	e005      	b.n	80006a2 <Lcd_ES_tsendCmd+0xca>
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	4883      	ldr	r0, [pc, #524]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 800069e:	f001 fc11 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fe4e 	bl	8000344 <LCD_ES_tTrigger_Enable>
		(GET_BIT(cmd,3)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d006      	beq.n	80006c4 <Lcd_ES_tsendCmd+0xec>
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006bc:	487b      	ldr	r0, [pc, #492]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 80006be:	f001 fc01 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80006c2:	e005      	b.n	80006d0 <Lcd_ES_tsendCmd+0xf8>
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	4878      	ldr	r0, [pc, #480]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 80006cc:	f001 fbfa 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,2)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Lcd_ES_tsendCmd+0x114>
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e4:	4871      	ldr	r0, [pc, #452]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 80006e6:	f001 fbed 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80006ea:	e005      	b.n	80006f8 <Lcd_ES_tsendCmd+0x120>
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	486e      	ldr	r0, [pc, #440]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 80006f4:	f001 fbe6 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,1)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	085b      	lsrs	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <Lcd_ES_tsendCmd+0x13c>
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070c:	4867      	ldr	r0, [pc, #412]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 800070e:	f001 fbd9 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000712:	e005      	b.n	8000720 <Lcd_ES_tsendCmd+0x148>
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071a:	4864      	ldr	r0, [pc, #400]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 800071c:	f001 fbd2 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,0)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <Lcd_ES_tsendCmd+0x160>
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	485e      	ldr	r0, [pc, #376]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000732:	f001 fbc7 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000736:	e005      	b.n	8000744 <Lcd_ES_tsendCmd+0x16c>
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	485b      	ldr	r0, [pc, #364]	; (80008ac <Lcd_ES_tsendCmd+0x2d4>)
 8000740:	f001 fbc0 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fdfd 	bl	8000344 <LCD_ES_tTrigger_Enable>
		break;
 800074a:	e0a9      	b.n	80008a0 <Lcd_ES_tsendCmd+0x2c8>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_LOW);
 800074c:	2200      	movs	r2, #0
 800074e:	2120      	movs	r1, #32
 8000750:	4857      	ldr	r0, [pc, #348]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000752:	f001 fbb7 	bl	8001ec4 <MCAL_GPIO_WritePin>


		(GET_BIT(cmd,7)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	09db      	lsrs	r3, r3, #7
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d006      	beq.n	8000772 <Lcd_ES_tsendCmd+0x19a>
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076a:	4851      	ldr	r0, [pc, #324]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 800076c:	f001 fbaa 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000770:	e005      	b.n	800077e <Lcd_ES_tsendCmd+0x1a6>
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000778:	484d      	ldr	r0, [pc, #308]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 800077a:	f001 fba3 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,6)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	099b      	lsrs	r3, r3, #6
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d006      	beq.n	800079a <Lcd_ES_tsendCmd+0x1c2>
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4847      	ldr	r0, [pc, #284]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000794:	f001 fb96 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000798:	e005      	b.n	80007a6 <Lcd_ES_tsendCmd+0x1ce>
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	4843      	ldr	r0, [pc, #268]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 80007a2:	f001 fb8f 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,5)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	095b      	lsrs	r3, r3, #5
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d006      	beq.n	80007c2 <Lcd_ES_tsendCmd+0x1ea>
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	483d      	ldr	r0, [pc, #244]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 80007bc:	f001 fb82 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80007c0:	e005      	b.n	80007ce <Lcd_ES_tsendCmd+0x1f6>
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4839      	ldr	r0, [pc, #228]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 80007ca:	f001 fb7b 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,4)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <Lcd_ES_tsendCmd+0x212>
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e2:	4833      	ldr	r0, [pc, #204]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 80007e4:	f001 fb6e 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80007e8:	e005      	b.n	80007f6 <Lcd_ES_tsendCmd+0x21e>
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	482f      	ldr	r0, [pc, #188]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 80007f2:	f001 fb67 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fda4 	bl	8000344 <LCD_ES_tTrigger_Enable>
		(GET_BIT(cmd,3)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <Lcd_ES_tsendCmd+0x240>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	4827      	ldr	r0, [pc, #156]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000812:	f001 fb57 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000816:	e005      	b.n	8000824 <Lcd_ES_tsendCmd+0x24c>
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081e:	4824      	ldr	r0, [pc, #144]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000820:	f001 fb50 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,2)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d006      	beq.n	8000840 <Lcd_ES_tsendCmd+0x268>
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000838:	481d      	ldr	r0, [pc, #116]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 800083a:	f001 fb43 	bl	8001ec4 <MCAL_GPIO_WritePin>
 800083e:	e005      	b.n	800084c <Lcd_ES_tsendCmd+0x274>
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	481a      	ldr	r0, [pc, #104]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000848:	f001 fb3c 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,1)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	085b      	lsrs	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d006      	beq.n	8000868 <Lcd_ES_tsendCmd+0x290>
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000862:	f001 fb2f 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000866:	e005      	b.n	8000874 <Lcd_ES_tsendCmd+0x29c>
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000870:	f001 fb28 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(cmd,0)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d006      	beq.n	800088c <Lcd_ES_tsendCmd+0x2b4>
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000886:	f001 fb1d 	bl	8001ec4 <MCAL_GPIO_WritePin>
 800088a:	e005      	b.n	8000898 <Lcd_ES_tsendCmd+0x2c0>
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <Lcd_ES_tsendCmd+0x2d8>)
 8000894:	f001 fb16 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fd53 	bl	8000344 <LCD_ES_tTrigger_Enable>
		break;
 800089e:	bf00      	nop
	}
	}

	return ES_OK;
 80008a0:	2300      	movs	r3, #0

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	40010800 	.word	0x40010800

080008b4 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(LCD_Instant instant, uint8_t data){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]

	switch(instant){
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <Lcd_ES_tsendChar+0x1e>
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	f000 80ac 	beq.w	8000a28 <Lcd_ES_tsendChar+0x174>
 80008d0:	e154      	b.n	8000b7c <Lcd_ES_tsendChar+0x2c8>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_HIGH);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d8:	48ab      	ldr	r0, [pc, #684]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80008da:	f001 faf3 	bl	8001ec4 <MCAL_GPIO_WritePin>


		(GET_BIT(data,7)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	09db      	lsrs	r3, r3, #7
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d006      	beq.n	80008fa <Lcd_ES_tsendChar+0x46>
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f2:	48a5      	ldr	r0, [pc, #660]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80008f4:	f001 fae6 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80008f8:	e005      	b.n	8000906 <Lcd_ES_tsendChar+0x52>
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000900:	48a1      	ldr	r0, [pc, #644]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 8000902:	f001 fadf 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,6)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	099b      	lsrs	r3, r3, #6
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d006      	beq.n	8000922 <Lcd_ES_tsendChar+0x6e>
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	489b      	ldr	r0, [pc, #620]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 800091c:	f001 fad2 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000920:	e005      	b.n	800092e <Lcd_ES_tsendChar+0x7a>
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4897      	ldr	r0, [pc, #604]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 800092a:	f001 facb 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,5)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <Lcd_ES_tsendChar+0x96>
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4891      	ldr	r0, [pc, #580]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 8000944:	f001 fabe 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000948:	e005      	b.n	8000956 <Lcd_ES_tsendChar+0xa2>
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000950:	488d      	ldr	r0, [pc, #564]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 8000952:	f001 fab7 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,4)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <Lcd_ES_tsendChar+0xbe>
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	4887      	ldr	r0, [pc, #540]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 800096c:	f001 faaa 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000970:	e005      	b.n	800097e <Lcd_ES_tsendChar+0xca>
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	4883      	ldr	r0, [pc, #524]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 800097a:	f001 faa3 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fce0 	bl	8000344 <LCD_ES_tTrigger_Enable>
		(GET_BIT(data,3)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D7_1,GPIO_PIN_LOW);
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	08db      	lsrs	r3, r3, #3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <Lcd_ES_tsendChar+0xec>
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	487b      	ldr	r0, [pc, #492]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 800099a:	f001 fa93 	bl	8001ec4 <MCAL_GPIO_WritePin>
 800099e:	e005      	b.n	80009ac <Lcd_ES_tsendChar+0xf8>
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a6:	4878      	ldr	r0, [pc, #480]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80009a8:	f001 fa8c 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,2)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D6_1,GPIO_PIN_LOW);
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d006      	beq.n	80009c8 <Lcd_ES_tsendChar+0x114>
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c0:	4871      	ldr	r0, [pc, #452]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80009c2:	f001 fa7f 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80009c6:	e005      	b.n	80009d4 <Lcd_ES_tsendChar+0x120>
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ce:	486e      	ldr	r0, [pc, #440]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80009d0:	f001 fa78 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,1)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D5_1,GPIO_PIN_LOW);
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	085b      	lsrs	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <Lcd_ES_tsendChar+0x13c>
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e8:	4867      	ldr	r0, [pc, #412]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80009ea:	f001 fa6b 	bl	8001ec4 <MCAL_GPIO_WritePin>
 80009ee:	e005      	b.n	80009fc <Lcd_ES_tsendChar+0x148>
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4864      	ldr	r0, [pc, #400]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 80009f8:	f001 fa64 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,0)) ? MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_1_DATA_PORT, D4_1,GPIO_PIN_LOW);
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <Lcd_ES_tsendChar+0x160>
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0c:	485e      	ldr	r0, [pc, #376]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 8000a0e:	f001 fa59 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000a12:	e005      	b.n	8000a20 <Lcd_ES_tsendChar+0x16c>
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	485b      	ldr	r0, [pc, #364]	; (8000b88 <Lcd_ES_tsendChar+0x2d4>)
 8000a1c:	f001 fa52 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_1);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fc8f 	bl	8000344 <LCD_ES_tTrigger_Enable>
		break;
 8000a26:	e0a9      	b.n	8000b7c <Lcd_ES_tsendChar+0x2c8>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_HIGH);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	4857      	ldr	r0, [pc, #348]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000a2e:	f001 fa49 	bl	8001ec4 <MCAL_GPIO_WritePin>


		(GET_BIT(data,7)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	09db      	lsrs	r3, r3, #7
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <Lcd_ES_tsendChar+0x19a>
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a46:	4851      	ldr	r0, [pc, #324]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000a48:	f001 fa3c 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000a4c:	e005      	b.n	8000a5a <Lcd_ES_tsendChar+0x1a6>
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	484d      	ldr	r0, [pc, #308]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000a56:	f001 fa35 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,6)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	099b      	lsrs	r3, r3, #6
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <Lcd_ES_tsendChar+0x1c2>
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6e:	4847      	ldr	r0, [pc, #284]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000a70:	f001 fa28 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000a74:	e005      	b.n	8000a82 <Lcd_ES_tsendChar+0x1ce>
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7c:	4843      	ldr	r0, [pc, #268]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000a7e:	f001 fa21 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,5)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	095b      	lsrs	r3, r3, #5
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <Lcd_ES_tsendChar+0x1ea>
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a96:	483d      	ldr	r0, [pc, #244]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000a98:	f001 fa14 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000a9c:	e005      	b.n	8000aaa <Lcd_ES_tsendChar+0x1f6>
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	4839      	ldr	r0, [pc, #228]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000aa6:	f001 fa0d 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,4)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	091b      	lsrs	r3, r3, #4
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <Lcd_ES_tsendChar+0x212>
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abe:	4833      	ldr	r0, [pc, #204]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000ac0:	f001 fa00 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000ac4:	e005      	b.n	8000ad2 <Lcd_ES_tsendChar+0x21e>
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000acc:	482f      	ldr	r0, [pc, #188]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000ace:	f001 f9f9 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff fc36 	bl	8000344 <LCD_ES_tTrigger_Enable>
		(GET_BIT(data,3)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D7_2,GPIO_PIN_LOW);
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <Lcd_ES_tsendChar+0x240>
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	4827      	ldr	r0, [pc, #156]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000aee:	f001 f9e9 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000af2:	e005      	b.n	8000b00 <Lcd_ES_tsendChar+0x24c>
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000afc:	f001 f9e2 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,2)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D6_2,GPIO_PIN_LOW);
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <Lcd_ES_tsendChar+0x268>
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	481d      	ldr	r0, [pc, #116]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000b16:	f001 f9d5 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000b1a:	e005      	b.n	8000b28 <Lcd_ES_tsendChar+0x274>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b22:	481a      	ldr	r0, [pc, #104]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000b24:	f001 f9ce 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,1)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D5_2,GPIO_PIN_LOW);
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <Lcd_ES_tsendChar+0x290>
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4813      	ldr	r0, [pc, #76]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000b3e:	f001 f9c1 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000b42:	e005      	b.n	8000b50 <Lcd_ES_tsendChar+0x29c>
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000b4c:	f001 f9ba 	bl	8001ec4 <MCAL_GPIO_WritePin>
		(GET_BIT(data,0)) ? MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_HIGH) : MCAL_GPIO_WritePin(LCD_2_DATA_PORT, D4_2,GPIO_PIN_LOW);
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <Lcd_ES_tsendChar+0x2b4>
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b60:	480a      	ldr	r0, [pc, #40]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000b62:	f001 f9af 	bl	8001ec4 <MCAL_GPIO_WritePin>
 8000b66:	e005      	b.n	8000b74 <Lcd_ES_tsendChar+0x2c0>
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <Lcd_ES_tsendChar+0x2d8>)
 8000b70:	f001 f9a8 	bl	8001ec4 <MCAL_GPIO_WritePin>
		//Trigger Enable
		LCD_ES_tTrigger_Enable(LCD_Instant_2);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fbe5 	bl	8000344 <LCD_ES_tTrigger_Enable>
		break;
 8000b7a:	bf00      	nop
	}
	}
	return ES_OK;
 8000b7c:	2300      	movs	r3, #0

}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40010800 	.word	0x40010800

08000b90 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(LCD_Instant instant, char *data)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]

	switch(instant){
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <Lcd_ES_tsendString+0x18>
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d01b      	beq.n	8000bde <Lcd_ES_tsendString+0x4e>
 8000ba6:	e034      	b.n	8000c12 <Lcd_ES_tsendString+0x82>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_HIGH);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bae:	481b      	ldr	r0, [pc, #108]	; (8000c1c <Lcd_ES_tsendString+0x8c>)
 8000bb0:	f001 f988 	bl	8001ec4 <MCAL_GPIO_WritePin>

		unsigned char i=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
		while(data[i]!=0)
 8000bb8:	e00a      	b.n	8000bd0 <Lcd_ES_tsendString+0x40>
		{
			Lcd_ES_tsendChar(LCD_Instant_1,data[i]);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fe75 	bl	80008b4 <Lcd_ES_tsendChar>
			i++;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
		while(data[i]!=0)
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1ee      	bne.n	8000bba <Lcd_ES_tsendString+0x2a>
		}
		break;
 8000bdc:	e019      	b.n	8000c12 <Lcd_ES_tsendString+0x82>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_HIGH);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2120      	movs	r1, #32
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <Lcd_ES_tsendString+0x90>)
 8000be4:	f001 f96e 	bl	8001ec4 <MCAL_GPIO_WritePin>

		unsigned char i=0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73bb      	strb	r3, [r7, #14]
		while(data[i]!=0)
 8000bec:	e00a      	b.n	8000c04 <Lcd_ES_tsendString+0x74>
		{
			Lcd_ES_tsendChar(LCD_Instant_2,data[i]);
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fe5b 	bl	80008b4 <Lcd_ES_tsendChar>
			i++;
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
 8000c00:	3301      	adds	r3, #1
 8000c02:	73bb      	strb	r3, [r7, #14]
		while(data[i]!=0)
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1ee      	bne.n	8000bee <Lcd_ES_tsendString+0x5e>
		}
		break;
 8000c10:	bf00      	nop
	}
	}


	return ES_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40010800 	.word	0x40010800

08000c24 <Lcd_ES_tdisplayNum>:
}


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(LCD_Instant instant, uint16_t num)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80bb      	strh	r3, [r7, #4]

	switch(instant){
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <Lcd_ES_tdisplayNum+0x1c>
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d053      	beq.n	8000ce6 <Lcd_ES_tdisplayNum+0xc2>
 8000c3e:	e0a3      	b.n	8000d88 <Lcd_ES_tdisplayNum+0x164>
	case LCD_Instant_1:
	{
		MCAL_GPIO_WritePin(LCD_1_CMD_PORT, RS_1, GPIO_PIN_HIGH);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c46:	4853      	ldr	r0, [pc, #332]	; (8000d94 <Lcd_ES_tdisplayNum+0x170>)
 8000c48:	f001 f93c 	bl	8001ec4 <MCAL_GPIO_WritePin>

		uint8_t ch[10],i=0,j=0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c52:	2300      	movs	r3, #0
 8000c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(num == 0)
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d124      	bne.n	8000ca8 <Lcd_ES_tdisplayNum+0x84>
		{
			Lcd_ES_tsendChar(LCD_Instant_1,'0');
 8000c5e:	2130      	movs	r1, #48	; 0x30
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fe27 	bl	80008b4 <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
			{
				Lcd_ES_tsendChar(LCD_Instant_1,ch[j-1]);
			}
		}
		break;
 8000c66:	e08f      	b.n	8000d88 <Lcd_ES_tdisplayNum+0x164>
				ch[i] = num % 10 + '0';  //To convert int to char
 8000c68:	88ba      	ldrh	r2, [r7, #4]
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <Lcd_ES_tdisplayNum+0x174>)
 8000c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c70:	08d9      	lsrs	r1, r3, #3
 8000c72:	460b      	mov	r3, r1
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c84:	3230      	adds	r2, #48	; 0x30
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f803 2c10 	strb.w	r2, [r3, #-16]
				num /= 10;
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	4a40      	ldr	r2, [pc, #256]	; (8000d98 <Lcd_ES_tdisplayNum+0x174>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	80bb      	strh	r3, [r7, #4]
				i++;
 8000c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			while(num)
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1dc      	bne.n	8000c68 <Lcd_ES_tdisplayNum+0x44>
			for(j=i;j>0;j--)
 8000cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cb6:	e010      	b.n	8000cda <Lcd_ES_tdisplayNum+0xb6>
				Lcd_ES_tsendChar(LCD_Instant_1,ch[j-1]);
 8000cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fdf2 	bl	80008b4 <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
 8000cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1ea      	bne.n	8000cb8 <Lcd_ES_tdisplayNum+0x94>
		break;
 8000ce2:	bf00      	nop
 8000ce4:	e050      	b.n	8000d88 <Lcd_ES_tdisplayNum+0x164>
	}
	case LCD_Instant_2:
	{
		MCAL_GPIO_WritePin(LCD_2_CMD_PORT, RS_2, GPIO_PIN_HIGH);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2120      	movs	r1, #32
 8000cea:	482c      	ldr	r0, [pc, #176]	; (8000d9c <Lcd_ES_tdisplayNum+0x178>)
 8000cec:	f001 f8ea 	bl	8001ec4 <MCAL_GPIO_WritePin>

		uint8_t ch[10],i=0,j=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(num == 0)
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d124      	bne.n	8000d4c <Lcd_ES_tdisplayNum+0x128>
		{
			Lcd_ES_tsendChar(LCD_Instant_2,'0');
 8000d02:	2130      	movs	r1, #48	; 0x30
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fdd5 	bl	80008b4 <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
			{
				Lcd_ES_tsendChar(LCD_Instant_2,ch[j-1]);
			}
		}
		break;
 8000d0a:	e03d      	b.n	8000d88 <Lcd_ES_tdisplayNum+0x164>
				ch[i] = num % 10 + '0';  //To convert int to char
 8000d0c:	88ba      	ldrh	r2, [r7, #4]
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <Lcd_ES_tdisplayNum+0x174>)
 8000d10:	fba3 1302 	umull	r1, r3, r3, r2
 8000d14:	08d9      	lsrs	r1, r3, #3
 8000d16:	460b      	mov	r3, r1
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d28:	3230      	adds	r2, #48	; 0x30
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d30:	440b      	add	r3, r1
 8000d32:	f803 2c1c 	strb.w	r2, [r3, #-28]
				num /= 10;
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <Lcd_ES_tdisplayNum+0x174>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	80bb      	strh	r3, [r7, #4]
				i++;
 8000d42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d46:	3301      	adds	r3, #1
 8000d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			while(num)
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1dc      	bne.n	8000d0c <Lcd_ES_tdisplayNum+0xe8>
			for(j=i;j>0;j--)
 8000d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d5a:	e010      	b.n	8000d7e <Lcd_ES_tdisplayNum+0x15a>
				Lcd_ES_tsendChar(LCD_Instant_2,ch[j-1]);
 8000d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d60:	3b01      	subs	r3, #1
 8000d62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d66:	4413      	add	r3, r2
 8000d68:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff fda0 	bl	80008b4 <Lcd_ES_tsendChar>
			for(j=i;j>0;j--)
 8000d74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1ea      	bne.n	8000d5c <Lcd_ES_tdisplayNum+0x138>
		break;
 8000d86:	bf00      	nop
	}
	}



	return ES_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	cccccccd 	.word	0xcccccccd
 8000d9c:	40010800 	.word	0x40010800

08000da0 <LCD_ES_tGoTo>:

	return ES_OK;
}

/************************************************************************/
ES_t LCD_ES_tGoTo(LCD_Instant instant, uint8_t Line, uint8_t x){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	460b      	mov	r3, r1
 8000dac:	71bb      	strb	r3, [r7, #6]
 8000dae:	4613      	mov	r3, r2
 8000db0:	717b      	strb	r3, [r7, #5]


	switch(instant)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <LCD_ES_tGoTo+0x1e>
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d03a      	beq.n	8000e32 <LCD_ES_tGoTo+0x92>
 8000dbc:	e076      	b.n	8000eac <LCD_ES_tGoTo+0x10c>
	{
	case LCD_Instant_1:
	{
		if(0 == Line)
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10a      	bne.n	8000dda <LCD_ES_tGoTo+0x3a>
		{
			if ( x <=15)
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d86d      	bhi.n	8000ea6 <LCD_ES_tGoTo+0x106>
			{
				Lcd_ES_tsendCmd(LCD_Instant_1,(0x80 + x));
 8000dca:	797b      	ldrb	r3, [r7, #5]
 8000dcc:	3b80      	subs	r3, #128	; 0x80
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff fc00 	bl	80005d8 <Lcd_ES_tsendCmd>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0xD0 + x));
			}
		}else{
			return ES_NOT_OK;
		}
		break;
 8000dd8:	e065      	b.n	8000ea6 <LCD_ES_tGoTo+0x106>
		else if (1 == Line)
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d10a      	bne.n	8000df6 <LCD_ES_tGoTo+0x56>
			if ( x <=15)
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d85f      	bhi.n	8000ea6 <LCD_ES_tGoTo+0x106>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0xC0 + x));
 8000de6:	797b      	ldrb	r3, [r7, #5]
 8000de8:	3b40      	subs	r3, #64	; 0x40
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fbf2 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 8000df4:	e057      	b.n	8000ea6 <LCD_ES_tGoTo+0x106>
		else if(2 == Line)
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d10a      	bne.n	8000e12 <LCD_ES_tGoTo+0x72>
			if ( x <=15)
 8000dfc:	797b      	ldrb	r3, [r7, #5]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	d851      	bhi.n	8000ea6 <LCD_ES_tGoTo+0x106>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0x90 + x));
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	3b70      	subs	r3, #112	; 0x70
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fbe4 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 8000e10:	e049      	b.n	8000ea6 <LCD_ES_tGoTo+0x106>
		}else if(3 == Line)
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d10a      	bne.n	8000e2e <LCD_ES_tGoTo+0x8e>
			if ( x <=15)
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d843      	bhi.n	8000ea6 <LCD_ES_tGoTo+0x106>
				Lcd_ES_tsendCmd(LCD_Instant_1,(0xD0 + x));
 8000e1e:	797b      	ldrb	r3, [r7, #5]
 8000e20:	3b30      	subs	r3, #48	; 0x30
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4619      	mov	r1, r3
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fbd6 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 8000e2c:	e03b      	b.n	8000ea6 <LCD_ES_tGoTo+0x106>
			return ES_NOT_OK;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e03d      	b.n	8000eae <LCD_ES_tGoTo+0x10e>
	}
	case LCD_Instant_2:
	{
		if(0 == Line)
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10a      	bne.n	8000e4e <LCD_ES_tGoTo+0xae>
		{
			if ( x <=15)
 8000e38:	797b      	ldrb	r3, [r7, #5]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d835      	bhi.n	8000eaa <LCD_ES_tGoTo+0x10a>
			{
				Lcd_ES_tsendCmd(LCD_Instant_2,(0x80 + x));
 8000e3e:	797b      	ldrb	r3, [r7, #5]
 8000e40:	3b80      	subs	r3, #128	; 0x80
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fbc6 	bl	80005d8 <Lcd_ES_tsendCmd>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0xD0 + x));
			}
		}else{
			return ES_NOT_OK;
		}
		break;
 8000e4c:	e02d      	b.n	8000eaa <LCD_ES_tGoTo+0x10a>
		else if (1 == Line)
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10a      	bne.n	8000e6a <LCD_ES_tGoTo+0xca>
			if ( x <=15)
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d827      	bhi.n	8000eaa <LCD_ES_tGoTo+0x10a>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0xC0 + x));
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	3b40      	subs	r3, #64	; 0x40
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fbb8 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 8000e68:	e01f      	b.n	8000eaa <LCD_ES_tGoTo+0x10a>
		else if(2 == Line)
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d10a      	bne.n	8000e86 <LCD_ES_tGoTo+0xe6>
			if ( x <=15)
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	d819      	bhi.n	8000eaa <LCD_ES_tGoTo+0x10a>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0x90 + x));
 8000e76:	797b      	ldrb	r3, [r7, #5]
 8000e78:	3b70      	subs	r3, #112	; 0x70
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fbaa 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 8000e84:	e011      	b.n	8000eaa <LCD_ES_tGoTo+0x10a>
		}else if(3 == Line)
 8000e86:	79bb      	ldrb	r3, [r7, #6]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d10a      	bne.n	8000ea2 <LCD_ES_tGoTo+0x102>
			if ( x <=15)
 8000e8c:	797b      	ldrb	r3, [r7, #5]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d80b      	bhi.n	8000eaa <LCD_ES_tGoTo+0x10a>
				Lcd_ES_tsendCmd(LCD_Instant_2,(0xD0 + x));
 8000e92:	797b      	ldrb	r3, [r7, #5]
 8000e94:	3b30      	subs	r3, #48	; 0x30
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff fb9c 	bl	80005d8 <Lcd_ES_tsendCmd>
		break;
 8000ea0:	e003      	b.n	8000eaa <LCD_ES_tGoTo+0x10a>
			return ES_NOT_OK;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e003      	b.n	8000eae <LCD_ES_tGoTo+0x10e>
		break;
 8000ea6:	bf00      	nop
 8000ea8:	e000      	b.n	8000eac <LCD_ES_tGoTo+0x10c>
		break;
 8000eaa:	bf00      	nop
	}




	return ES_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <LED_Init>:




void LED_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R_LED;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LED_PORT, &PinCfg);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <LED_Init+0x54>)
 8000ed0:	f000 ff62 	bl	8001d98 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = G_LED;
 8000ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed8:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8000eda:	2304      	movs	r3, #4
 8000edc:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LED_PORT, &PinCfg);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <LED_Init+0x54>)
 8000ee8:	f000 ff56 	bl	8001d98 <MCAL_GPIO_Init>


	// By default, they are off
	MCAL_GPIO_WritePin(LED_PORT, R_LED, GPIO_PIN_HIGH);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <LED_Init+0x54>)
 8000ef2:	f000 ffe7 	bl	8001ec4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_HIGH);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <LED_Init+0x54>)
 8000efe:	f000 ffe1 	bl	8001ec4 <MCAL_GPIO_WritePin>


}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40010800 	.word	0x40010800

08000f10 <LED_ON>:


// LEDs are connected normally to VCC, so they need a GND to work

void LED_ON(uint32_t LED)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	switch(LED)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d003      	beq.n	8000f26 <LED_ON+0x16>
 8000f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f22:	d006      	beq.n	8000f32 <LED_ON+0x22>
	{
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_LOW);
		break;
	}
	}
}
 8000f24:	e00c      	b.n	8000f40 <LED_ON+0x30>
		MCAL_GPIO_WritePin(LED_PORT, R_LED, GPIO_PIN_LOW);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <LED_ON+0x38>)
 8000f2c:	f000 ffca 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 8000f30:	e006      	b.n	8000f40 <LED_ON+0x30>
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_LOW);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <LED_ON+0x38>)
 8000f3a:	f000 ffc3 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 8000f3e:	bf00      	nop
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010800 	.word	0x40010800

08000f4c <LED_OFF>:



void LED_OFF(uint32_t LED)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	switch(LED)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d003      	beq.n	8000f62 <LED_OFF+0x16>
 8000f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f5e:	d006      	beq.n	8000f6e <LED_OFF+0x22>
	{
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_HIGH);
		break;
	}
	}
}
 8000f60:	e00c      	b.n	8000f7c <LED_OFF+0x30>
		MCAL_GPIO_WritePin(LED_PORT, R_LED, GPIO_PIN_HIGH);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <LED_OFF+0x38>)
 8000f68:	f000 ffac 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 8000f6c:	e006      	b.n	8000f7c <LED_OFF+0x30>
		MCAL_GPIO_WritePin(LED_PORT, G_LED, GPIO_PIN_HIGH);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <LED_OFF+0x38>)
 8000f76:	f000 ffa5 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 8000f7a:	bf00      	nop
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010800 	.word	0x40010800

08000f88 <PIR_Init>:
#include "PIR.h"



void PIR_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = PIR_1;
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 8000f92:	2303      	movs	r3, #3
 8000f94:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(PIR_PORT, &PinCfg);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <PIR_Init+0x34>)
 8000f9c:	f000 fefc 	bl	8001d98 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = PIR_2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_PULLDOWN;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(PIR_PORT, &PinCfg);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4619      	mov	r1, r3
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <PIR_Init+0x34>)
 8000fae:	f000 fef3 	bl	8001d98 <MCAL_GPIO_Init>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <PIR_Read>:




void PIR_Read(uint16_t PIR, uint8_t *pir_reading)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	80fb      	strh	r3, [r7, #6]

	switch(PIR)
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d011      	beq.n	8000ff6 <PIR_Read+0x36>
 8000fd2:	2b80      	cmp	r3, #128	; 0x80
 8000fd4:	d000      	beq.n	8000fd8 <PIR_Read+0x18>
			*pir_reading = GPIO_PIN_LOW;
		}
		break;
	}
	}
}
 8000fd6:	e01d      	b.n	8001014 <PIR_Read+0x54>
		if(MCAL_GPIO_ReadPin(PIR_PORT, PIR_1) == GPIO_PIN_HIGH)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	4810      	ldr	r0, [pc, #64]	; (800101c <PIR_Read+0x5c>)
 8000fdc:	f000 ff5b 	bl	8001e96 <MCAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d103      	bne.n	8000fee <PIR_Read+0x2e>
			*pir_reading = GPIO_PIN_HIGH;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
		break;
 8000fec:	e012      	b.n	8001014 <PIR_Read+0x54>
			*pir_reading = GPIO_PIN_LOW;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
		break;
 8000ff4:	e00e      	b.n	8001014 <PIR_Read+0x54>
		if(MCAL_GPIO_ReadPin(PIR_PORT, PIR_2) == GPIO_PIN_HIGH)
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <PIR_Read+0x5c>)
 8000ffa:	f000 ff4c 	bl	8001e96 <MCAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d103      	bne.n	800100c <PIR_Read+0x4c>
			*pir_reading = GPIO_PIN_HIGH;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
		break;
 800100a:	e002      	b.n	8001012 <PIR_Read+0x52>
			*pir_reading = GPIO_PIN_LOW;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		break;
 8001012:	bf00      	nop
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010800 	.word	0x40010800

08001020 <Servo_Init>:

#include "Servo.h"


void Servo_Init(Servo_Index servo)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	GPIO_PinConfig_t PinCfg;

	switch(servo)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <Servo_Init+0x16>
 8001030:	2b01      	cmp	r3, #1
 8001032:	d00e      	beq.n	8001052 <Servo_Init+0x32>
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(SERVO_PORT, &PinCfg);
		break;
	}
	}
}
 8001034:	e01b      	b.n	800106e <Servo_Init+0x4e>
		PinCfg.GPIO_PinNumber = SERVO_ENTRY_PIN;
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 800103c:	2304      	movs	r3, #4
 800103e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(SERVO_PORT, &PinCfg);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <Servo_Init+0x58>)
 800104c:	f000 fea4 	bl	8001d98 <MCAL_GPIO_Init>
		break;
 8001050:	e00d      	b.n	800106e <Servo_Init+0x4e>
		PinCfg.GPIO_PinNumber = SERVO_EXIT_PIN;
 8001052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001056:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL;
 8001058:	2304      	movs	r3, #4
 800105a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(SERVO_PORT, &PinCfg);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <Servo_Init+0x58>)
 8001068:	f000 fe96 	bl	8001d98 <MCAL_GPIO_Init>
		break;
 800106c:	bf00      	nop
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010c00 	.word	0x40010c00

0800107c <Servo_Move>:

// Back to zero --> 1.5ms
// go to 90 --> 2ms

void Servo_Move(Servo_Index servo, Servo_Direction dir)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	switch(servo)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <Servo_Move+0x1c>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d025      	beq.n	80010e2 <Servo_Move+0x66>
		}

		break;
	}
	}
}
 8001096:	e049      	b.n	800112c <Servo_Move+0xb0>
		if(dir == UP)
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d110      	bne.n	80010c0 <Servo_Move+0x44>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_HIGH);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <Servo_Move+0xb8>)
 80010a6:	f000 ff0d 	bl	8001ec4 <MCAL_GPIO_WritePin>
			Delay_us(2000);
 80010aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ae:	f000 ffa3 	bl	8001ff8 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_LOW);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b8:	481e      	ldr	r0, [pc, #120]	; (8001134 <Servo_Move+0xb8>)
 80010ba:	f000 ff03 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 80010be:	e035      	b.n	800112c <Servo_Move+0xb0>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_HIGH);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <Servo_Move+0xb8>)
 80010c8:	f000 fefc 	bl	8001ec4 <MCAL_GPIO_WritePin>
			Delay_us(1487);
 80010cc:	f240 50cf 	movw	r0, #1487	; 0x5cf
 80010d0:	f000 ff92 	bl	8001ff8 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_ENTRY_PIN, GPIO_PIN_LOW);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <Servo_Move+0xb8>)
 80010dc:	f000 fef2 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 80010e0:	e024      	b.n	800112c <Servo_Move+0xb0>
		if(dir == UP)
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d110      	bne.n	800110a <Servo_Move+0x8e>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_HIGH);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <Servo_Move+0xb8>)
 80010f0:	f000 fee8 	bl	8001ec4 <MCAL_GPIO_WritePin>
			Delay_us(2000);
 80010f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010f8:	f000 ff7e 	bl	8001ff8 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_LOW);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <Servo_Move+0xb8>)
 8001104:	f000 fede 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 8001108:	e00f      	b.n	800112a <Servo_Move+0xae>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_HIGH);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <Servo_Move+0xb8>)
 8001112:	f000 fed7 	bl	8001ec4 <MCAL_GPIO_WritePin>
			Delay_us(1487);
 8001116:	f240 50cf 	movw	r0, #1487	; 0x5cf
 800111a:	f000 ff6d 	bl	8001ff8 <Delay_us>
			MCAL_GPIO_WritePin(SERVO_PORT, SERVO_EXIT_PIN, GPIO_PIN_LOW);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <Servo_Move+0xb8>)
 8001126:	f000 fecd 	bl	8001ec4 <MCAL_GPIO_WritePin>
		break;
 800112a:	bf00      	nop
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010c00 	.word	0x40010c00

08001138 <clearArray>:

uint8_t EntryCard[4]={0},ExitCard[4]={0};


void clearArray(uint8_t arr[], uint8_t size)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<size;i++){
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e007      	b.n	800115a <clearArray+0x22>
		arr[i] = 0;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<size;i++){
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	3301      	adds	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	429a      	cmp	r2, r3
 8001160:	d3f3      	bcc.n	800114a <clearArray+0x12>
	}
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <ShowIDs>:


void ShowIDs(uint8_t arr[][5], uint8_t row)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<row;i++){
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e01c      	b.n	80011b8 <ShowIDs+0x4c>
		LCD_ES_tGoTo(ADMIN_LCD, i, 0);
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fe0b 	bl	8000da0 <LCD_ES_tGoTo>
		Lcd_ES_tdisplayNum(ADMIN_LCD, i);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fd47 	bl	8000c24 <Lcd_ES_tdisplayNum>
		Lcd_ES_tsendString(ADMIN_LCD, "- ");
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <ShowIDs+0x5c>)
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fcf9 	bl	8000b90 <Lcd_ES_tsendString>
		Lcd_ES_tsendString(ADMIN_LCD, arr[i]);
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fcef 	bl	8000b90 <Lcd_ES_tsendString>
	for(uint8_t i=0;i<row;i++){
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3301      	adds	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3de      	bcc.n	800117e <ShowIDs+0x12>
	}
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	080024a8 	.word	0x080024a8

080011cc <CompareWithDataBase>:


// Comparing between the passed card and the database

uint8_t CompareWithDataBase(uint8_t EnteredCard[],uint8_t arr[][5])
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	uint8_t i=0,j=0,counter=0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	2300      	movs	r3, #0
 80011dc:	73bb      	strb	r3, [r7, #14]
 80011de:	2300      	movs	r3, #0
 80011e0:	737b      	strb	r3, [r7, #13]
	while(j<4){
 80011e2:	e01c      	b.n	800121e <CompareWithDataBase+0x52>
		for(i=0;i<4;i++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e013      	b.n	8001212 <CompareWithDataBase+0x46>
			if(EnteredCard[i]==arr[j][i]){
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	7819      	ldrb	r1, [r3, #0]
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	441a      	add	r2, r3
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	4299      	cmp	r1, r3
 8001204:	d102      	bne.n	800120c <CompareWithDataBase+0x40>
				counter++;
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	3301      	adds	r3, #1
 800120a:	737b      	strb	r3, [r7, #13]
		for(i=0;i<4;i++){
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d9e8      	bls.n	80011ea <CompareWithDataBase+0x1e>
			}
		}

		//		counter = 0;
		j++;
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	3301      	adds	r3, #1
 800121c:	73bb      	strb	r3, [r7, #14]
	while(j<4){
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d9df      	bls.n	80011e4 <CompareWithDataBase+0x18>
	}
	if((counter%4 == 0) && (counter!=0)){
 8001224:	7b7b      	ldrb	r3, [r7, #13]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <CompareWithDataBase+0x6e>
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <CompareWithDataBase+0x6e>
		return 1;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <CompareWithDataBase+0x70>
	}else{
		return 0;
 800123a:	2300      	movs	r3, #0
	}
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
	...

08001248 <UART_RecieverEntry_CallBack>:

uint8_t gettingOption = 0,userDisplayed = 0,adminDisplayed = 0;


void UART_RecieverEntry_CallBack(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	LED_OFF(G_LED);
 800124c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001250:	f7ff fe7c 	bl	8000f4c <LED_OFF>
	LED_OFF(R_LED);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fe79 	bl	8000f4c <LED_OFF>
	if(EntryCounter==0){
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <UART_RecieverEntry_CallBack+0x36>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[0], Disable);EntryCounter++;}
 8001264:	2200      	movs	r2, #0
 8001266:	495f      	ldr	r1, [pc, #380]	; (80013e4 <UART_RecieverEntry_CallBack+0x19c>)
 8001268:	485f      	ldr	r0, [pc, #380]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 800126a:	f001 f831 	bl	80022d0 <MCAL_UART_ReceiveData>
 800126e:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e09f      	b.n	80013be <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==1){
 800127e:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10c      	bne.n	80012a2 <UART_RecieverEntry_CallBack+0x5a>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[1], Disable);EntryCounter++;}
 8001288:	2200      	movs	r2, #0
 800128a:	4958      	ldr	r1, [pc, #352]	; (80013ec <UART_RecieverEntry_CallBack+0x1a4>)
 800128c:	4856      	ldr	r0, [pc, #344]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 800128e:	f001 f81f 	bl	80022d0 <MCAL_UART_ReceiveData>
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e08d      	b.n	80013be <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==2){
 80012a2:	4b4f      	ldr	r3, [pc, #316]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d10c      	bne.n	80012c6 <UART_RecieverEntry_CallBack+0x7e>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[2], Disable);EntryCounter++;}
 80012ac:	2200      	movs	r2, #0
 80012ae:	4950      	ldr	r1, [pc, #320]	; (80013f0 <UART_RecieverEntry_CallBack+0x1a8>)
 80012b0:	484d      	ldr	r0, [pc, #308]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 80012b2:	f001 f80d 	bl	80022d0 <MCAL_UART_ReceiveData>
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e07b      	b.n	80013be <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==3){
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d10c      	bne.n	80012ea <UART_RecieverEntry_CallBack+0xa2>
		MCAL_UART_ReceiveData(RFID_Entry_USART, &temp_EntryCard[3], Disable);EntryCounter++;}
 80012d0:	2200      	movs	r2, #0
 80012d2:	4948      	ldr	r1, [pc, #288]	; (80013f4 <UART_RecieverEntry_CallBack+0x1ac>)
 80012d4:	4844      	ldr	r0, [pc, #272]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 80012d6:	f000 fffb 	bl	80022d0 <MCAL_UART_ReceiveData>
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e069      	b.n	80013be <UART_RecieverEntry_CallBack+0x176>
	else if(EntryCounter==4){
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d161      	bne.n	80013b8 <UART_RecieverEntry_CallBack+0x170>
		temp_EntryCard[4] = '\0';
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <UART_RecieverEntry_CallBack+0x19c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	711a      	strb	r2, [r3, #4]
		MCAL_UART_ReceiveData(RFID_Entry_USART, &dump, Disable);
 80012fa:	2200      	movs	r2, #0
 80012fc:	493e      	ldr	r1, [pc, #248]	; (80013f8 <UART_RecieverEntry_CallBack+0x1b0>)
 80012fe:	483a      	ldr	r0, [pc, #232]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 8001300:	f000 ffe6 	bl	80022d0 <MCAL_UART_ReceiveData>
		EntryCounter=0;
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
		EntryReceived=1;
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <UART_RecieverEntry_CallBack+0x1b4>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendString(RFID_Entry_USART, "Your ID: ", Enable);
 8001310:	2201      	movs	r2, #1
 8001312:	493b      	ldr	r1, [pc, #236]	; (8001400 <UART_RecieverEntry_CallBack+0x1b8>)
 8001314:	4834      	ldr	r0, [pc, #208]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 8001316:	f000 ffb2 	bl	800227e <MCAL_UART_SendString>
		MCAL_UART_SendString(RFID_Entry_USART, temp_EntryCard, Enable);
 800131a:	2201      	movs	r2, #1
 800131c:	4931      	ldr	r1, [pc, #196]	; (80013e4 <UART_RecieverEntry_CallBack+0x19c>)
 800131e:	4832      	ldr	r0, [pc, #200]	; (80013e8 <UART_RecieverEntry_CallBack+0x1a0>)
 8001320:	f000 ffad 	bl	800227e <MCAL_UART_SendString>
		if(CompareWithDataBase(temp_EntryCard,AllowedIDs)){
 8001324:	4937      	ldr	r1, [pc, #220]	; (8001404 <UART_RecieverEntry_CallBack+0x1bc>)
 8001326:	482f      	ldr	r0, [pc, #188]	; (80013e4 <UART_RecieverEntry_CallBack+0x19c>)
 8001328:	f7ff ff50 	bl	80011cc <CompareWithDataBase>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d033      	beq.n	800139a <UART_RecieverEntry_CallBack+0x152>
			if(availableSlots>0)
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <UART_RecieverEntry_CallBack+0x1c0>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <UART_RecieverEntry_CallBack+0x102>
				availableSlots--;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <UART_RecieverEntry_CallBack+0x1c0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	3b01      	subs	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <UART_RecieverEntry_CallBack+0x1c0>)
 8001348:	701a      	strb	r2, [r3, #0]
			lcd_ES_tclear(USER_LCD);
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff f926 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Eligible ID");
 8001350:	492e      	ldr	r1, [pc, #184]	; (800140c <UART_RecieverEntry_CallBack+0x1c4>)
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fc1c 	bl	8000b90 <Lcd_ES_tsendString>
			LED_ON(G_LED);
 8001358:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800135c:	f7ff fdd8 	bl	8000f10 <LED_ON>
			Servo_Move(Servo_Entry, UP);
 8001360:	2101      	movs	r1, #1
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fe8a 	bl	800107c <Servo_Move>
			PIR_Read(PIR_1, &PIR1_Reading);
 8001368:	4929      	ldr	r1, [pc, #164]	; (8001410 <UART_RecieverEntry_CallBack+0x1c8>)
 800136a:	2080      	movs	r0, #128	; 0x80
 800136c:	f7ff fe28 	bl	8000fc0 <PIR_Read>
			while(PIR1_Reading){
 8001370:	e006      	b.n	8001380 <UART_RecieverEntry_CallBack+0x138>
				PIR_Read(PIR_1, &PIR1_Reading);
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <UART_RecieverEntry_CallBack+0x1c8>)
 8001374:	2080      	movs	r0, #128	; 0x80
 8001376:	f7ff fe23 	bl	8000fc0 <PIR_Read>
				Delay_ms(3);
 800137a:	2003      	movs	r0, #3
 800137c:	f000 fe50 	bl	8002020 <Delay_ms>
			while(PIR1_Reading){
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <UART_RecieverEntry_CallBack+0x1c8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f4      	bne.n	8001372 <UART_RecieverEntry_CallBack+0x12a>
			}
			Servo_Move(Servo_Entry, DOWN);
 8001388:	2100      	movs	r1, #0
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fe76 	bl	800107c <Servo_Move>
			LED_OFF(G_LED);
 8001390:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001394:	f7ff fdda 	bl	8000f4c <LED_OFF>
 8001398:	e009      	b.n	80013ae <UART_RecieverEntry_CallBack+0x166>
		}else{
			lcd_ES_tclear(USER_LCD);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff f8fe 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Unregistered ID");
 80013a0:	491c      	ldr	r1, [pc, #112]	; (8001414 <UART_RecieverEntry_CallBack+0x1cc>)
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fbf4 	bl	8000b90 <Lcd_ES_tsendString>
			LED_ON(R_LED);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fdb1 	bl	8000f10 <LED_ON>
		}
		clearArray(temp_EntryCard,5);
 80013ae:	2105      	movs	r1, #5
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <UART_RecieverEntry_CallBack+0x19c>)
 80013b2:	f7ff fec1 	bl	8001138 <clearArray>
 80013b6:	e002      	b.n	80013be <UART_RecieverEntry_CallBack+0x176>
	}else{
		EntryCounter=-1;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <UART_RecieverEntry_CallBack+0x198>)
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	701a      	strb	r2, [r3, #0]
	}
	gettingOption = 0;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <UART_RecieverEntry_CallBack+0x1d0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	userDisplayed = 0;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <UART_RecieverEntry_CallBack+0x1d4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	adminDisplayed = 0;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <UART_RecieverEntry_CallBack+0x1d8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
	lcd_ES_tclear(USER_LCD);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff f8e3 	bl	800059c <lcd_ES_tclear>
	currentState = ADMIN_OPTIONS;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <UART_RecieverEntry_CallBack+0x1dc>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000003b 	.word	0x2000003b
 80013e4:	20000040 	.word	0x20000040
 80013e8:	40013800 	.word	0x40013800
 80013ec:	20000041 	.word	0x20000041
 80013f0:	20000042 	.word	0x20000042
 80013f4:	20000043 	.word	0x20000043
 80013f8:	20000038 	.word	0x20000038
 80013fc:	20000039 	.word	0x20000039
 8001400:	080024ac 	.word	0x080024ac
 8001404:	20000024 	.word	0x20000024
 8001408:	20000000 	.word	0x20000000
 800140c:	080024b8 	.word	0x080024b8
 8001410:	20000020 	.word	0x20000020
 8001414:	080024c4 	.word	0x080024c4
 8001418:	2000004f 	.word	0x2000004f
 800141c:	20000050 	.word	0x20000050
 8001420:	20000051 	.word	0x20000051
 8001424:	2000004e 	.word	0x2000004e

08001428 <UART_RecieverExit_CallBack>:




void UART_RecieverExit_CallBack(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	if(ExitCounter==0){
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <UART_RecieverExit_CallBack+0x28>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[0], Disable);ExitCounter++;}
 8001436:	2200      	movs	r2, #0
 8001438:	4959      	ldr	r1, [pc, #356]	; (80015a0 <UART_RecieverExit_CallBack+0x178>)
 800143a:	485a      	ldr	r0, [pc, #360]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 800143c:	f000 ff48 	bl	80022d0 <MCAL_UART_ReceiveData>
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b54      	ldr	r3, [pc, #336]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e094      	b.n	800157a <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==1){
 8001450:	4b52      	ldr	r3, [pc, #328]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10c      	bne.n	8001474 <UART_RecieverExit_CallBack+0x4c>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[1], Disable);ExitCounter++;}
 800145a:	2200      	movs	r2, #0
 800145c:	4952      	ldr	r1, [pc, #328]	; (80015a8 <UART_RecieverExit_CallBack+0x180>)
 800145e:	4851      	ldr	r0, [pc, #324]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 8001460:	f000 ff36 	bl	80022d0 <MCAL_UART_ReceiveData>
 8001464:	4b4d      	ldr	r3, [pc, #308]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b4b      	ldr	r3, [pc, #300]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e082      	b.n	800157a <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==2){
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d10c      	bne.n	8001498 <UART_RecieverExit_CallBack+0x70>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[2], Disable);ExitCounter++;}
 800147e:	2200      	movs	r2, #0
 8001480:	494a      	ldr	r1, [pc, #296]	; (80015ac <UART_RecieverExit_CallBack+0x184>)
 8001482:	4848      	ldr	r0, [pc, #288]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 8001484:	f000 ff24 	bl	80022d0 <MCAL_UART_ReceiveData>
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b42      	ldr	r3, [pc, #264]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e070      	b.n	800157a <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==3){
 8001498:	4b40      	ldr	r3, [pc, #256]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d10c      	bne.n	80014bc <UART_RecieverExit_CallBack+0x94>
		MCAL_UART_ReceiveData(RFID_Exit_USART, &temp_ExitCard[3], Disable);ExitCounter++;}
 80014a2:	2200      	movs	r2, #0
 80014a4:	4942      	ldr	r1, [pc, #264]	; (80015b0 <UART_RecieverExit_CallBack+0x188>)
 80014a6:	483f      	ldr	r0, [pc, #252]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 80014a8:	f000 ff12 	bl	80022d0 <MCAL_UART_ReceiveData>
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e05e      	b.n	800157a <UART_RecieverExit_CallBack+0x152>
	else if(ExitCounter==4){
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d156      	bne.n	8001574 <UART_RecieverExit_CallBack+0x14c>
		temp_ExitCard[4] = '\0';
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <UART_RecieverExit_CallBack+0x178>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	711a      	strb	r2, [r3, #4]
		// To receive the enter in a dump variable
		MCAL_UART_ReceiveData(RFID_Exit_USART, &dump, Disable);
 80014cc:	2200      	movs	r2, #0
 80014ce:	4939      	ldr	r1, [pc, #228]	; (80015b4 <UART_RecieverExit_CallBack+0x18c>)
 80014d0:	4834      	ldr	r0, [pc, #208]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 80014d2:	f000 fefd 	bl	80022d0 <MCAL_UART_ReceiveData>
		ExitCounter=0;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
		ExitReceived=1;
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <UART_RecieverExit_CallBack+0x190>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
		MCAL_UART_SendString(RFID_Exit_USART, "Your ID: ", Enable);
 80014e2:	2201      	movs	r2, #1
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <UART_RecieverExit_CallBack+0x194>)
 80014e6:	482f      	ldr	r0, [pc, #188]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 80014e8:	f000 fec9 	bl	800227e <MCAL_UART_SendString>
		MCAL_UART_SendString(RFID_Exit_USART, temp_ExitCard, Enable);
 80014ec:	2201      	movs	r2, #1
 80014ee:	492c      	ldr	r1, [pc, #176]	; (80015a0 <UART_RecieverExit_CallBack+0x178>)
 80014f0:	482c      	ldr	r0, [pc, #176]	; (80015a4 <UART_RecieverExit_CallBack+0x17c>)
 80014f2:	f000 fec4 	bl	800227e <MCAL_UART_SendString>
		if(CompareWithDataBase(temp_ExitCard,AllowedIDs)){
 80014f6:	4932      	ldr	r1, [pc, #200]	; (80015c0 <UART_RecieverExit_CallBack+0x198>)
 80014f8:	4829      	ldr	r0, [pc, #164]	; (80015a0 <UART_RecieverExit_CallBack+0x178>)
 80014fa:	f7ff fe67 	bl	80011cc <CompareWithDataBase>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02b      	beq.n	800155c <UART_RecieverExit_CallBack+0x134>
			if(availableSlots<3)
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <UART_RecieverExit_CallBack+0x19c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d806      	bhi.n	800151c <UART_RecieverExit_CallBack+0xf4>
				availableSlots++;
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <UART_RecieverExit_CallBack+0x19c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <UART_RecieverExit_CallBack+0x19c>)
 800151a:	701a      	strb	r2, [r3, #0]
			lcd_ES_tclear(USER_LCD);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff f83d 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Eligible ID");
 8001522:	4929      	ldr	r1, [pc, #164]	; (80015c8 <UART_RecieverExit_CallBack+0x1a0>)
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fb33 	bl	8000b90 <Lcd_ES_tsendString>
			Servo_Move(Servo_Exit, UP);
 800152a:	2101      	movs	r1, #1
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fda5 	bl	800107c <Servo_Move>
			PIR_Read(PIR_2, &PIR2_Reading);
 8001532:	4926      	ldr	r1, [pc, #152]	; (80015cc <UART_RecieverExit_CallBack+0x1a4>)
 8001534:	2002      	movs	r0, #2
 8001536:	f7ff fd43 	bl	8000fc0 <PIR_Read>
			while(PIR2_Reading){
 800153a:	e006      	b.n	800154a <UART_RecieverExit_CallBack+0x122>
				PIR_Read(PIR_2, &PIR2_Reading);
 800153c:	4923      	ldr	r1, [pc, #140]	; (80015cc <UART_RecieverExit_CallBack+0x1a4>)
 800153e:	2002      	movs	r0, #2
 8001540:	f7ff fd3e 	bl	8000fc0 <PIR_Read>
				Delay_ms(3);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 fd6b 	bl	8002020 <Delay_ms>
			while(PIR2_Reading){
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <UART_RecieverExit_CallBack+0x1a4>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f4      	bne.n	800153c <UART_RecieverExit_CallBack+0x114>
			}
			Servo_Move(Servo_Exit, DOWN);
 8001552:	2100      	movs	r1, #0
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fd91 	bl	800107c <Servo_Move>
 800155a:	e006      	b.n	800156a <UART_RecieverExit_CallBack+0x142>
		}else{
			lcd_ES_tclear(USER_LCD);
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff f81d 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(USER_LCD, "Unregistered ID");
 8001562:	491b      	ldr	r1, [pc, #108]	; (80015d0 <UART_RecieverExit_CallBack+0x1a8>)
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fb13 	bl	8000b90 <Lcd_ES_tsendString>
		}
		clearArray(temp_ExitCard,5);
 800156a:	2105      	movs	r1, #5
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <UART_RecieverExit_CallBack+0x178>)
 800156e:	f7ff fde3 	bl	8001138 <clearArray>
 8001572:	e002      	b.n	800157a <UART_RecieverExit_CallBack+0x152>
	}else{
		ExitCounter=0;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <UART_RecieverExit_CallBack+0x174>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	}
	gettingOption = 0;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <UART_RecieverExit_CallBack+0x1ac>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
	userDisplayed = 0;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <UART_RecieverExit_CallBack+0x1b0>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	adminDisplayed = 0;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <UART_RecieverExit_CallBack+0x1b4>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
	lcd_ES_tclear(USER_LCD);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff f805 	bl	800059c <lcd_ES_tclear>
	currentState = ADMIN_OPTIONS;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <UART_RecieverExit_CallBack+0x1b8>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000003c 	.word	0x2000003c
 80015a0:	20000048 	.word	0x20000048
 80015a4:	40004400 	.word	0x40004400
 80015a8:	20000049 	.word	0x20000049
 80015ac:	2000004a 	.word	0x2000004a
 80015b0:	2000004b 	.word	0x2000004b
 80015b4:	20000038 	.word	0x20000038
 80015b8:	2000003a 	.word	0x2000003a
 80015bc:	080024ac 	.word	0x080024ac
 80015c0:	20000024 	.word	0x20000024
 80015c4:	20000000 	.word	0x20000000
 80015c8:	080024b8 	.word	0x080024b8
 80015cc:	20000021 	.word	0x20000021
 80015d0:	080024c4 	.word	0x080024c4
 80015d4:	2000004f 	.word	0x2000004f
 80015d8:	20000050 	.word	0x20000050
 80015dc:	20000051 	.word	0x20000051
 80015e0:	2000004e 	.word	0x2000004e

080015e4 <clock_init>:




void clock_init()
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA (bit 2)
	RCC_GPIOA_CLK_EN();
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <clock_init+0x30>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <clock_init+0x30>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
	// Enable clock for GPIOB (bit 3)
	RCC_GPIOB_CLK_EN();
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <clock_init+0x30>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <clock_init+0x30>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <clock_init+0x30>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <clock_init+0x30>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6193      	str	r3, [r2, #24]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000

08001618 <main>:


int main(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b093      	sub	sp, #76	; 0x4c
 800161c:	af00      	add	r7, sp, #0
	clock_init();
 800161e:	f7ff ffe1 	bl	80015e4 <clock_init>
	Lcd_ES_tInit(LCD_Instant_1);
 8001622:	2000      	movs	r0, #0
 8001624:	f7fe fec6 	bl	80003b4 <Lcd_ES_tInit>
	lcd_ES_tclear(LCD_Instant_1);
 8001628:	2000      	movs	r0, #0
 800162a:	f7fe ffb7 	bl	800059c <lcd_ES_tclear>
	Lcd_ES_tInit(LCD_Instant_2);
 800162e:	2001      	movs	r0, #1
 8001630:	f7fe fec0 	bl	80003b4 <Lcd_ES_tInit>
	lcd_ES_tclear(LCD_Instant_2);
 8001634:	2001      	movs	r0, #1
 8001636:	f7fe ffb1 	bl	800059c <lcd_ES_tclear>
	KPD_init();
 800163a:	f7fe fda3 	bl	8000184 <KPD_init>
	PIR_Init();
 800163e:	f7ff fca3 	bl	8000f88 <PIR_Init>
	LED_Init();
 8001642:	f7ff fc39 	bl	8000eb8 <LED_Init>
	TIMER2_Init();
 8001646:	f000 fcaf 	bl	8001fa8 <TIMER2_Init>
	Servo_Init(Servo_Entry);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff fce8 	bl	8001020 <Servo_Init>
	Servo_Init(Servo_Exit);
 8001650:	2001      	movs	r0, #1
 8001652:	f7ff fce5 	bl	8001020 <Servo_Init>

	Servo_Move(Servo_Entry, DOWN);
 8001656:	2100      	movs	r1, #0
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fd0f 	bl	800107c <Servo_Move>
	Servo_Move(Servo_Exit, DOWN);
 800165e:	2100      	movs	r1, #0
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff fd0b 	bl	800107c <Servo_Move>
	// Both USARTs tested


	// Initialization of USART
	UART_Config UART_EntryCfg;
	UART_EntryCfg.BaudRate = UART_BaudRate_115200;
 8001666:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
	UART_EntryCfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	UART_EntryCfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 8001672:	2320      	movs	r3, #32
 8001674:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	UART_EntryCfg.P_IRQ_CallBack = UART_RecieverEntry_CallBack;
 8001678:	4bd1      	ldr	r3, [pc, #836]	; (80019c0 <main+0x3a8>)
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
	UART_EntryCfg.Parity = UART_Parity_NONE;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	UART_EntryCfg.Payload_length = UART_Payload_Length_8B;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	UART_EntryCfg.StopBits = UART_StopBits_1;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	UART_EntryCfg.USART_Mode = UART_Mode_Tx_Rx;
 800168e:	230c      	movs	r3, #12
 8001690:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	MCAL_UART_Init(RFID_Entry_USART, &UART_EntryCfg);
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	4619      	mov	r1, r3
 800169a:	48ca      	ldr	r0, [pc, #808]	; (80019c4 <main+0x3ac>)
 800169c:	f000 fcf8 	bl	8002090 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(RFID_Entry_USART);
 80016a0:	48c8      	ldr	r0, [pc, #800]	; (80019c4 <main+0x3ac>)
 80016a2:	f000 fe4d 	bl	8002340 <MCAL_UART_GPIO_SetPins>


	UART_Config UART_ExitCfg;
	UART_ExitCfg.BaudRate = UART_BaudRate_115200;
 80016a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016aa:	61fb      	str	r3, [r7, #28]
	UART_ExitCfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	UART_ExitCfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 80016b2:	2320      	movs	r3, #32
 80016b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UART_ExitCfg.P_IRQ_CallBack = UART_RecieverExit_CallBack;
 80016b8:	4bc3      	ldr	r3, [pc, #780]	; (80019c8 <main+0x3b0>)
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
	UART_ExitCfg.Parity = UART_Parity_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	UART_ExitCfg.Payload_length = UART_Payload_Length_8B;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3020 	strb.w	r3, [r7, #32]
	UART_ExitCfg.StopBits = UART_StopBits_1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	UART_ExitCfg.USART_Mode = UART_Mode_Tx_Rx;
 80016ce:	230c      	movs	r3, #12
 80016d0:	763b      	strb	r3, [r7, #24]
	MCAL_UART_Init(RFID_Exit_USART, &UART_ExitCfg);
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	4619      	mov	r1, r3
 80016d8:	48bc      	ldr	r0, [pc, #752]	; (80019cc <main+0x3b4>)
 80016da:	f000 fcd9 	bl	8002090 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(RFID_Exit_USART);
 80016de:	48bb      	ldr	r0, [pc, #748]	; (80019cc <main+0x3b4>)
 80016e0:	f000 fe2e 	bl	8002340 <MCAL_UART_GPIO_SetPins>


	// Admin LCD
	Lcd_ES_tsendString(ADMIN_LCD, "Hello Admin");
 80016e4:	49ba      	ldr	r1, [pc, #744]	; (80019d0 <main+0x3b8>)
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fa52 	bl	8000b90 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fb55 	bl	8000da0 <LCD_ES_tGoTo>
	Lcd_ES_tsendString(ADMIN_LCD, "Enter Password: ");
 80016f6:	49b7      	ldr	r1, [pc, #732]	; (80019d4 <main+0x3bc>)
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fa49 	bl	8000b90 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2102      	movs	r1, #2
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fb4c 	bl	8000da0 <LCD_ES_tGoTo>


	lcd_ES_tclear(USER_LCD);
 8001708:	2001      	movs	r0, #1
 800170a:	f7fe ff47 	bl	800059c <lcd_ES_tclear>
	LCD_ES_tGoTo(USER_LCD, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff fb44 	bl	8000da0 <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Welcome to our");
 8001718:	49af      	ldr	r1, [pc, #700]	; (80019d8 <main+0x3c0>)
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fa38 	bl	8000b90 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 1, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fb3b 	bl	8000da0 <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Parking :)");
 800172a:	49ac      	ldr	r1, [pc, #688]	; (80019dc <main+0x3c4>)
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fa2f 	bl	8000b90 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 2, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff fb32 	bl	8000da0 <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Empty Slots:");
 800173c:	49a8      	ldr	r1, [pc, #672]	; (80019e0 <main+0x3c8>)
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fa26 	bl	8000b90 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 3, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2103      	movs	r1, #3
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff fb29 	bl	8000da0 <LCD_ES_tGoTo>
	Lcd_ES_tsendString(USER_LCD, "Pass your card");
 800174e:	49a5      	ldr	r1, [pc, #660]	; (80019e4 <main+0x3cc>)
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff fa1d 	bl	8000b90 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(USER_LCD, 2, 14);
 8001756:	220e      	movs	r2, #14
 8001758:	2102      	movs	r1, #2
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff fb20 	bl	8000da0 <LCD_ES_tGoTo>
	Lcd_ES_tdisplayNum(USER_LCD, availableSlots);
 8001760:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <main+0x3d0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	b29b      	uxth	r3, r3
 8001768:	4619      	mov	r1, r3
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fa5a 	bl	8000c24 <Lcd_ES_tdisplayNum>

	// Try to send and receive strings using USART
	// Done using interrupts(CallBack functions above)


	uint8_t password[] = "1234";
 8001770:	4a9e      	ldr	r2, [pc, #632]	; (80019ec <main+0x3d4>)
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800177a:	6018      	str	r0, [r3, #0]
 800177c:	3304      	adds	r3, #4
 800177e:	7019      	strb	r1, [r3, #0]

	uint8_t enteredPassword[5] = {'\0'};
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	711a      	strb	r2, [r3, #4]
	uint8_t enteringIndex = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint8_t enteredOption = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]





	uint8_t DeleteIndex = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	71bb      	strb	r3, [r7, #6]
	uint8_t AddIndex = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	717b      	strb	r3, [r7, #5]

	uint8_t inputIndex = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46


	uint8_t PressedID_Digit = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	713b      	strb	r3, [r7, #4]

	uint8_t IDFlag = 0, IndexFlag = 0, DelteIndex = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	{




		switch(currentState){
 80017b8:	4b8d      	ldr	r3, [pc, #564]	; (80019f0 <main+0x3d8>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d8fb      	bhi.n	80017b8 <main+0x1a0>
 80017c0:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <main+0x1b0>)
 80017c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c6:	bf00      	nop
 80017c8:	080017dd 	.word	0x080017dd
 80017cc:	080018a1 	.word	0x080018a1
 80017d0:	08001bcb 	.word	0x08001bcb
 80017d4:	08001aeb 	.word	0x08001aeb
 80017d8:	08001b1f 	.word	0x08001b1f
		{


			//PIR_Read(PIR_2, &PIR2_Reading);
			// Make password four items
			KPD_ES_tGetKeyPressed(&KeyPressed);
 80017dc:	4885      	ldr	r0, [pc, #532]	; (80019f4 <main+0x3dc>)
 80017de:	f7fe fd37 	bl	8000250 <KPD_ES_tGetKeyPressed>
			if(KeyPressed!=KPD_U8_NOT_PRESSED)
 80017e2:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <main+0x3dc>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	f000 8232 	beq.w	8001c50 <main+0x638>
			{
				LCD_ES_tGoTo(ADMIN_LCD, 2, enteringIndex+3);
 80017ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017f0:	3303      	adds	r3, #3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	2102      	movs	r1, #2
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fad1 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(ADMIN_LCD, '*');
 80017fe:	212a      	movs	r1, #42	; 0x2a
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff f857 	bl	80008b4 <Lcd_ES_tsendChar>
				enteredPassword[enteringIndex] = KeyPressed;
 8001806:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800180a:	4a7a      	ldr	r2, [pc, #488]	; (80019f4 <main+0x3dc>)
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001812:	440b      	add	r3, r1
 8001814:	f803 2c40 	strb.w	r2, [r3, #-64]
				enteringIndex++;
 8001818:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800181c:	3301      	adds	r3, #1
 800181e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(enteringIndex>=4){
 8001822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001826:	2b03      	cmp	r3, #3
 8001828:	f240 8212 	bls.w	8001c50 <main+0x638>
					// Comparing between two passwords
					if(strcmp(enteredPassword,password) == 0){
 800182c:	f107 0210 	add.w	r2, r7, #16
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fc9a 	bl	8000170 <strcmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d11e      	bne.n	8001880 <main+0x268>
						// Password is correct
						lcd_ES_tclear(ADMIN_LCD);
 8001842:	2000      	movs	r0, #0
 8001844:	f7fe feaa 	bl	800059c <lcd_ES_tclear>
						LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff faa7 	bl	8000da0 <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Correct Password");
 8001852:	4969      	ldr	r1, [pc, #420]	; (80019f8 <main+0x3e0>)
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff f99b 	bl	8000b90 <Lcd_ES_tsendString>
						Delay_ms(100);
 800185a:	2064      	movs	r0, #100	; 0x64
 800185c:	f000 fbe0 	bl	8002020 <Delay_ms>
						lcd_ES_tclear(ADMIN_LCD);
 8001860:	2000      	movs	r0, #0
 8001862:	f7fe fe9b 	bl	800059c <lcd_ES_tclear>
						gettingOption = 0;
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <main+0x3e4>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <main+0x3e8>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <main+0x3ec>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
						currentState = ADMIN_OPTIONS;
 8001878:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <main+0x3d8>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e00b      	b.n	8001898 <main+0x280>
					}else{
						// Password is wrong
						lcd_ES_tclear(ADMIN_LCD);
 8001880:	2000      	movs	r0, #0
 8001882:	f7fe fe8b 	bl	800059c <lcd_ES_tclear>
						LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2102      	movs	r1, #2
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fa88 	bl	8000da0 <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Wrong Password");
 8001890:	495d      	ldr	r1, [pc, #372]	; (8001a08 <main+0x3f0>)
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff f97c 	bl	8000b90 <Lcd_ES_tsendString>
					}
					enteringIndex = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
			break;
 800189e:	e1d7      	b.n	8001c50 <main+0x638>
		}
		case ADMIN_OPTIONS:
		{
			// Ask the user for his desired action
			// 1- display id    2- delete id    3- add id      4- delete all Ids   (Each id is 4 digit)
			if(!userDisplayed){
 80018a0:	4b57      	ldr	r3, [pc, #348]	; (8001a00 <main+0x3e8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d136      	bne.n	8001916 <main+0x2fe>
				lcd_ES_tclear(USER_LCD);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7fe fe77 	bl	800059c <lcd_ES_tclear>
				LCD_ES_tGoTo(USER_LCD, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fa74 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Welcome to our");
 80018b8:	4947      	ldr	r1, [pc, #284]	; (80019d8 <main+0x3c0>)
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff f968 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 1, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2101      	movs	r1, #1
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fa6b 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Parking :)");
 80018ca:	4944      	ldr	r1, [pc, #272]	; (80019dc <main+0x3c4>)
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff f95f 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 2, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2102      	movs	r1, #2
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff fa62 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Empty Slots:");
 80018dc:	4940      	ldr	r1, [pc, #256]	; (80019e0 <main+0x3c8>)
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff f956 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 3, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2103      	movs	r1, #3
 80018e8:	2001      	movs	r0, #1
 80018ea:	f7ff fa59 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(USER_LCD, "Pass your card");
 80018ee:	493d      	ldr	r1, [pc, #244]	; (80019e4 <main+0x3cc>)
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff f94d 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(USER_LCD, 2, 14);
 80018f6:	220e      	movs	r2, #14
 80018f8:	2102      	movs	r1, #2
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff fa50 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tdisplayNum(USER_LCD, availableSlots);
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <main+0x3d0>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	4619      	mov	r1, r3
 800190a:	2001      	movs	r0, #1
 800190c:	f7ff f98a 	bl	8000c24 <Lcd_ES_tdisplayNum>
				userDisplayed = 1;
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <main+0x3e8>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			}


			IDFlag = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			IndexFlag = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			DelteIndex = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			if(!adminDisplayed){
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <main+0x3ec>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d126      	bne.n	800197e <main+0x366>
				LCD_ES_tGoTo(ADMIN_LCD, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fa33 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "1- Display IDs");
 800193a:	4934      	ldr	r1, [pc, #208]	; (8001a0c <main+0x3f4>)
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff f927 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fa2a 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "2- Delete ID");
 800194c:	4930      	ldr	r1, [pc, #192]	; (8001a10 <main+0x3f8>)
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff f91e 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(ADMIN_LCD, 2, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2102      	movs	r1, #2
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fa21 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "3- Add ID");
 800195e:	492d      	ldr	r1, [pc, #180]	; (8001a14 <main+0x3fc>)
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff f915 	bl	8000b90 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(ADMIN_LCD, 3, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2103      	movs	r1, #3
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fa18 	bl	8000da0 <LCD_ES_tGoTo>
				Lcd_ES_tsendString(ADMIN_LCD, "4- Delete all");
 8001970:	4929      	ldr	r1, [pc, #164]	; (8001a18 <main+0x400>)
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff f90c 	bl	8000b90 <Lcd_ES_tsendString>
				adminDisplayed = 1;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <main+0x3ec>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
			}


			if(!gettingOption){
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <main+0x3e4>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 80af 	bne.w	8001ae6 <main+0x4ce>
				// Getting option from user
				KPD_ES_tGetKeyPressed(&enteredOption);
 8001988:	1dfb      	adds	r3, r7, #7
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fc60 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(enteredOption!=KPD_U8_NOT_PRESSED){
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	f000 80a7 	beq.w	8001ae6 <main+0x4ce>
					gettingOption = 1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <main+0x3e4>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
					switch(enteredOption){
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	3b31      	subs	r3, #49	; 0x31
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	f200 808e 	bhi.w	8001ac4 <main+0x4ac>
 80019a8:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <main+0x398>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	08001a1d 	.word	0x08001a1d
 80019b4:	08001a45 	.word	0x08001a45
 80019b8:	08001a4d 	.word	0x08001a4d
 80019bc:	08001a55 	.word	0x08001a55
 80019c0:	08001249 	.word	0x08001249
 80019c4:	40013800 	.word	0x40013800
 80019c8:	08001429 	.word	0x08001429
 80019cc:	40004400 	.word	0x40004400
 80019d0:	080024d4 	.word	0x080024d4
 80019d4:	080024e0 	.word	0x080024e0
 80019d8:	080024f4 	.word	0x080024f4
 80019dc:	08002504 	.word	0x08002504
 80019e0:	08002510 	.word	0x08002510
 80019e4:	08002520 	.word	0x08002520
 80019e8:	20000000 	.word	0x20000000
 80019ec:	080025e4 	.word	0x080025e4
 80019f0:	2000004e 	.word	0x2000004e
 80019f4:	20000090 	.word	0x20000090
 80019f8:	08002530 	.word	0x08002530
 80019fc:	2000004f 	.word	0x2000004f
 8001a00:	20000050 	.word	0x20000050
 8001a04:	20000051 	.word	0x20000051
 8001a08:	08002544 	.word	0x08002544
 8001a0c:	08002554 	.word	0x08002554
 8001a10:	08002564 	.word	0x08002564
 8001a14:	08002574 	.word	0x08002574
 8001a18:	08002580 	.word	0x08002580
					case '1':  // Display IDs
					{
						lcd_ES_tclear(ADMIN_LCD);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7fe fdbd 	bl	800059c <lcd_ES_tclear>
						ShowIDs(AllowedIDs,4);
 8001a22:	2104      	movs	r1, #4
 8001a24:	488b      	ldr	r0, [pc, #556]	; (8001c54 <main+0x63c>)
 8001a26:	f7ff fba1 	bl	800116c <ShowIDs>
						Delay_ms(50);
 8001a2a:	2032      	movs	r0, #50	; 0x32
 8001a2c:	f000 faf8 	bl	8002020 <Delay_ms>
						gettingOption = 0;
 8001a30:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <main+0x640>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001a36:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <main+0x644>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001a3c:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <main+0x648>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
						break;
 8001a42:	e051      	b.n	8001ae8 <main+0x4d0>
					}
					case '2':   // Delete an ID
					{
						currentState = DELETE_ID;
 8001a44:	4b87      	ldr	r3, [pc, #540]	; (8001c64 <main+0x64c>)
 8001a46:	2202      	movs	r2, #2
 8001a48:	701a      	strb	r2, [r3, #0]
						break;
 8001a4a:	e04d      	b.n	8001ae8 <main+0x4d0>
					}
					case '3':   // Choose the index he want to add to
					{
						currentState = ADD_ID_INDEX;
 8001a4c:	4b85      	ldr	r3, [pc, #532]	; (8001c64 <main+0x64c>)
 8001a4e:	2203      	movs	r2, #3
 8001a50:	701a      	strb	r2, [r3, #0]
						break;
 8001a52:	e049      	b.n	8001ae8 <main+0x4d0>
					}
					case '4':  // Delete All
					{
						lcd_ES_tclear(ADMIN_LCD);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7fe fda1 	bl	800059c <lcd_ES_tclear>
						Lcd_ES_tsendString(ADMIN_LCD, "IDs deleted");
 8001a5a:	4983      	ldr	r1, [pc, #524]	; (8001c68 <main+0x650>)
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff f897 	bl	8000b90 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2101      	movs	r1, #1
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff f99a 	bl	8000da0 <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Successfully");
 8001a6c:	497f      	ldr	r1, [pc, #508]	; (8001c6c <main+0x654>)
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff f88e 	bl	8000b90 <Lcd_ES_tsendString>
						Delay_ms(200);
 8001a74:	20c8      	movs	r0, #200	; 0xc8
 8001a76:	f000 fad3 	bl	8002020 <Delay_ms>
						uint8_t j=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						for(j=0;j<4;j++){
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001a86:	e00f      	b.n	8001aa8 <main+0x490>
							clearArray(AllowedIDs[j], 5);
 8001a88:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	4a70      	ldr	r2, [pc, #448]	; (8001c54 <main+0x63c>)
 8001a94:	4413      	add	r3, r2
 8001a96:	2105      	movs	r1, #5
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb4d 	bl	8001138 <clearArray>
						for(j=0;j<4;j++){
 8001a9e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001aa8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d9eb      	bls.n	8001a88 <main+0x470>
						}
						gettingOption = 0;
 8001ab0:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <main+0x640>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001ab6:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <main+0x644>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <main+0x648>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
						break;
 8001ac2:	e011      	b.n	8001ae8 <main+0x4d0>
					}
					default:
					{
						lcd_ES_tclear(ADMIN_LCD);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7fe fd69 	bl	800059c <lcd_ES_tclear>
						Lcd_ES_tsendString(ADMIN_LCD, "Invalid Option");
 8001aca:	4969      	ldr	r1, [pc, #420]	; (8001c70 <main+0x658>)
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff f85f 	bl	8000b90 <Lcd_ES_tsendString>
						gettingOption = 0;
 8001ad2:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <main+0x640>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001ad8:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <main+0x644>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001ade:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <main+0x648>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
				}
			}



			break;
 8001ae4:	e0b5      	b.n	8001c52 <main+0x63a>
				}
 8001ae6:	bf00      	nop
			break;
 8001ae8:	e0b3      	b.n	8001c52 <main+0x63a>
		}
		case ADD_ID_INDEX:
		{
			lcd_ES_tclear(ADMIN_LCD);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7fe fd56 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(ADMIN_LCD, "Enter Index: ");
 8001af0:	4960      	ldr	r1, [pc, #384]	; (8001c74 <main+0x65c>)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff f84c 	bl	8000b90 <Lcd_ES_tsendString>
			while(!IndexFlag){
 8001af8:	e00c      	b.n	8001b14 <main+0x4fc>
				KPD_ES_tGetKeyPressed(&AddIndex);
 8001afa:	1d7b      	adds	r3, r7, #5
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fba7 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(AddIndex!=KPD_U8_NOT_PRESSED){
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	d005      	beq.n	8001b14 <main+0x4fc>
					// Getting the input from the ADMIN
					IndexFlag = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					currentState = ADD_ID;
 8001b0e:	4b55      	ldr	r3, [pc, #340]	; (8001c64 <main+0x64c>)
 8001b10:	2204      	movs	r2, #4
 8001b12:	701a      	strb	r2, [r3, #0]
			while(!IndexFlag){
 8001b14:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ee      	beq.n	8001afa <main+0x4e2>
				}
			}
			break;
 8001b1c:	e099      	b.n	8001c52 <main+0x63a>



		case ADD_ID:
		{
			lcd_ES_tclear(ADMIN_LCD);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7fe fd3c 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(ADMIN_LCD, "Enter ID: ");
 8001b24:	4954      	ldr	r1, [pc, #336]	; (8001c78 <main+0x660>)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff f832 	bl	8000b90 <Lcd_ES_tsendString>
			//Lcd_ES_tdisplayNum(ADMIN_LCD, inputIndex);
			while(!IDFlag){
 8001b2c:	e048      	b.n	8001bc0 <main+0x5a8>
				KPD_ES_tGetKeyPressed(&PressedID_Digit);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fb8d 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(PressedID_Digit!=KPD_U8_NOT_PRESSED){
 8001b36:	793b      	ldrb	r3, [r7, #4]
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d041      	beq.n	8001bc0 <main+0x5a8>
					AllowedIDs[AddIndex-'0'][inputIndex] = PressedID_Digit;
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b42:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 8001b46:	793c      	ldrb	r4, [r7, #4]
 8001b48:	4842      	ldr	r0, [pc, #264]	; (8001c54 <main+0x63c>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	4403      	add	r3, r0
 8001b52:	440b      	add	r3, r1
 8001b54:	4622      	mov	r2, r4
 8001b56:	701a      	strb	r2, [r3, #0]
					//inputID[inputIndex] = PressedID_Digit;
					Lcd_ES_tsendChar(ADMIN_LCD, PressedID_Digit);
 8001b58:	793b      	ldrb	r3, [r7, #4]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7fe fea9 	bl	80008b4 <Lcd_ES_tsendChar>
					inputIndex++;
 8001b62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b66:	3301      	adds	r3, #1
 8001b68:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					if(inputIndex>=4){
 8001b6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d925      	bls.n	8001bc0 <main+0x5a8>
						lcd_ES_tclear(ADMIN_LCD);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7fe fd11 	bl	800059c <lcd_ES_tclear>
						LCD_ES_tGoTo(ADMIN_LCD, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff f90e 	bl	8000da0 <LCD_ES_tGoTo>
						Lcd_ES_tsendString(ADMIN_LCD, "Entered ID");
 8001b84:	493d      	ldr	r1, [pc, #244]	; (8001c7c <main+0x664>)
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff f802 	bl	8000b90 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(ADMIN_LCD, 1, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff f905 	bl	8000da0 <LCD_ES_tGoTo>
						//Lcd_ES_tsendString(ADMIN_LCD, AllowedIDs[AddIndex-'0']);
						inputIndex = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						IDFlag = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
						lcd_ES_tclear(ADMIN_LCD);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7fe fcfa 	bl	800059c <lcd_ES_tclear>
						gettingOption = 0;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <main+0x640>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
						userDisplayed = 0;
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <main+0x644>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
						adminDisplayed = 0;
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <main+0x648>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
						currentState = ADMIN_OPTIONS;
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <main+0x64c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
			while(!IDFlag){
 8001bc0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0b2      	beq.n	8001b2e <main+0x516>
					}
				}
			}
			break;
 8001bc8:	e043      	b.n	8001c52 <main+0x63a>
		}


		case DELETE_ID:
		{
			lcd_ES_tclear(ADMIN_LCD);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7fe fce6 	bl	800059c <lcd_ES_tclear>
			Lcd_ES_tsendString(ADMIN_LCD, "Enter Index: ");
 8001bd0:	4928      	ldr	r1, [pc, #160]	; (8001c74 <main+0x65c>)
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7fe ffdc 	bl	8000b90 <Lcd_ES_tsendString>
			while(!DelteIndex){
 8001bd8:	e035      	b.n	8001c46 <main+0x62e>
				// Choose the index of the ID, he want to delete
				KPD_ES_tGetKeyPressed(&DeleteIndex);
 8001bda:	1dbb      	adds	r3, r7, #6
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fb37 	bl	8000250 <KPD_ES_tGetKeyPressed>
				if(DeleteIndex!=KPD_U8_NOT_PRESSED){
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	2bff      	cmp	r3, #255	; 0xff
 8001be6:	d02e      	beq.n	8001c46 <main+0x62e>
					uint8_t i=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					for(i=0;i<4;i++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001bf4:	e011      	b.n	8001c1a <main+0x602>
						AllowedIDs[DeleteIndex-'0'][i] = 0;
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bfc:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
 8001c00:	4814      	ldr	r0, [pc, #80]	; (8001c54 <main+0x63c>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	4403      	add	r3, r0
 8001c0a:	440b      	add	r3, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
					for(i=0;i<4;i++){
 8001c10:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001c14:	3301      	adds	r3, #1
 8001c16:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001c1a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d9e9      	bls.n	8001bf6 <main+0x5de>
					}

					lcd_ES_tclear(ADMIN_LCD);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7fe fcba 	bl	800059c <lcd_ES_tclear>
					DelteIndex = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					gettingOption = 0;
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <main+0x640>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
					userDisplayed = 0;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <main+0x644>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
					adminDisplayed = 0;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <main+0x648>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
					currentState = ADMIN_OPTIONS;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <main+0x64c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
			while(!DelteIndex){
 8001c46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0c5      	beq.n	8001bda <main+0x5c2>
				}
			}
			break;
 8001c4e:	e000      	b.n	8001c52 <main+0x63a>
			break;
 8001c50:	bf00      	nop
		switch(currentState){
 8001c52:	e5b1      	b.n	80017b8 <main+0x1a0>
 8001c54:	20000024 	.word	0x20000024
 8001c58:	2000004f 	.word	0x2000004f
 8001c5c:	20000050 	.word	0x20000050
 8001c60:	20000051 	.word	0x20000051
 8001c64:	2000004e 	.word	0x2000004e
 8001c68:	08002590 	.word	0x08002590
 8001c6c:	0800259c 	.word	0x0800259c
 8001c70:	080025ac 	.word	0x080025ac
 8001c74:	080025bc 	.word	0x080025bc
 8001c78:	080025cc 	.word	0x080025cc
 8001c7c:	080025d8 	.word	0x080025d8

08001c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c82:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <LoopForever+0xe>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	; (8001ccc <LoopForever+0x16>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cae:	f000 fbcb 	bl	8002448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cb2:	f7ff fcb1 	bl	8001618 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   r0, =_estack
 8001cb8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001cc4:	08002620 	.word	0x08002620
  ldr r2, =_sbss
 8001cc8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001ccc:	20000094 	.word	0x20000094

08001cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>

08001cd2 <Get_CRLH_Position>:
#include "Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	2b80      	cmp	r3, #128	; 0x80
 8001ce0:	d042      	beq.n	8001d68 <Get_CRLH_Position+0x96>
 8001ce2:	2b80      	cmp	r3, #128	; 0x80
 8001ce4:	dc11      	bgt.n	8001d0a <Get_CRLH_Position+0x38>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d036      	beq.n	8001d58 <Get_CRLH_Position+0x86>
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	dc06      	bgt.n	8001cfc <Get_CRLH_Position+0x2a>
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d02e      	beq.n	8001d50 <Get_CRLH_Position+0x7e>
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d02e      	beq.n	8001d54 <Get_CRLH_Position+0x82>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d028      	beq.n	8001d4c <Get_CRLH_Position+0x7a>
 8001cfa:	e047      	b.n	8001d8c <Get_CRLH_Position+0xba>
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d02f      	beq.n	8001d60 <Get_CRLH_Position+0x8e>
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	d02f      	beq.n	8001d64 <Get_CRLH_Position+0x92>
 8001d04:	2b10      	cmp	r3, #16
 8001d06:	d029      	beq.n	8001d5c <Get_CRLH_Position+0x8a>
 8001d08:	e040      	b.n	8001d8c <Get_CRLH_Position+0xba>
 8001d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d0e:	d033      	beq.n	8001d78 <Get_CRLH_Position+0xa6>
 8001d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d14:	dc09      	bgt.n	8001d2a <Get_CRLH_Position+0x58>
 8001d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1a:	d029      	beq.n	8001d70 <Get_CRLH_Position+0x9e>
 8001d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d20:	d028      	beq.n	8001d74 <Get_CRLH_Position+0xa2>
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d021      	beq.n	8001d6c <Get_CRLH_Position+0x9a>
 8001d28:	e030      	b.n	8001d8c <Get_CRLH_Position+0xba>
 8001d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2e:	d027      	beq.n	8001d80 <Get_CRLH_Position+0xae>
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d34:	dc03      	bgt.n	8001d3e <Get_CRLH_Position+0x6c>
 8001d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3a:	d01f      	beq.n	8001d7c <Get_CRLH_Position+0xaa>
 8001d3c:	e026      	b.n	8001d8c <Get_CRLH_Position+0xba>
 8001d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d42:	d01f      	beq.n	8001d84 <Get_CRLH_Position+0xb2>
 8001d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d48:	d01e      	beq.n	8001d88 <Get_CRLH_Position+0xb6>
 8001d4a:	e01f      	b.n	8001d8c <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e01e      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8001d50:	2304      	movs	r3, #4
 8001d52:	e01c      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8001d54:	2308      	movs	r3, #8
 8001d56:	e01a      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8001d58:	230c      	movs	r3, #12
 8001d5a:	e018      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	e016      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8001d60:	2314      	movs	r3, #20
 8001d62:	e014      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8001d64:	2318      	movs	r3, #24
 8001d66:	e012      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8001d68:	231c      	movs	r3, #28
 8001d6a:	e010      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e00e      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8001d70:	2304      	movs	r3, #4
 8001d72:	e00c      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8001d74:	2308      	movs	r3, #8
 8001d76:	e00a      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8001d78:	230c      	movs	r3, #12
 8001d7a:	e008      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	e006      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8001d80:	2314      	movs	r3, #20
 8001d82:	e004      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8001d84:	2318      	movs	r3, #24
 8001d86:	e002      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8001d88:	231c      	movs	r3, #28
 8001d8a:	e000      	b.n	8001d8e <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	d801      	bhi.n	8001db6 <MCAL_GPIO_Init+0x1e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e001      	b.n	8001dba <MCAL_GPIO_Init+0x22>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3304      	adds	r3, #4
 8001dba:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff86 	bl	8001cd2 <Get_CRLH_Position>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	230f      	movs	r3, #15
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	789b      	ldrb	r3, [r3, #2]
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	d00b      	beq.n	8001dfa <MCAL_GPIO_Init+0x62>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d007      	beq.n	8001dfa <MCAL_GPIO_Init+0x62>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	789b      	ldrb	r3, [r3, #2]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d003      	beq.n	8001dfa <MCAL_GPIO_Init+0x62>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	789b      	ldrb	r3, [r3, #2]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d10e      	bne.n	8001e18 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	789b      	ldrb	r3, [r3, #2]
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	78db      	ldrb	r3, [r3, #3]
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e02c      	b.n	8001e72 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d003      	beq.n	8001e28 <MCAL_GPIO_Init+0x90>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	789b      	ldrb	r3, [r3, #2]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	789b      	ldrb	r3, [r3, #2]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e01c      	b.n	8001e72 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d102      	bne.n	8001e46 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001e40:	2304      	movs	r3, #4
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e015      	b.n	8001e72 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8001e46:	2308      	movs	r3, #8
 8001e48:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	789b      	ldrb	r3, [r3, #2]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	8812      	ldrh	r2, [r2, #0]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	e007      	b.n	8001e72 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	8812      	ldrh	r2, [r2, #0]
 8001e6a:	43d2      	mvns	r2, r2
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001e72:	7bfc      	ldrb	r4, [r7, #15]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff2a 	bl	8001cd2 <Get_CRLH_Position>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	fa04 f203 	lsl.w	r2, r4, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	601a      	str	r2, [r3, #0]


}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}

08001e96 <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e001      	b.n	8001eb8 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8001ee0:	e002      	b.n	8001ee8 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	615a      	str	r2, [r3, #20]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
	...

08001ef4 <MCAL_RCC_GetSYSCLKFreq>:
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: not applicable

uint32_t MCAL_RCC_GetSYSCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d006      	beq.n	8001f14 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d302      	bcc.n	8001f10 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d004      	beq.n	8001f18 <MCAL_RCC_GetSYSCLKFreq+0x24>
 8001f0e:	e005      	b.n	8001f1c <MCAL_RCC_GetSYSCLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8001f12:	e003      	b.n	8001f1c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	case 1:
		// To do
		return HSE_RC_CLK;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8001f16:	e001      	b.n	8001f1c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	case 2:
		// To do
		return 16000000;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8001f1a:	e7ff      	b.n	8001f1c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;
	}
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	00f42400 	.word	0x00f42400

08001f30 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return ( MCAL_RCC_GetSYSCLKFreq() >> AHBPrescTable[((RCC->CFGR >> 4) & 0xF)] );
 8001f34:	f7ff ffde 	bl	8001ef4 <MCAL_RCC_GetSYSCLKFreq>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <MCAL_RCC_GetHCLKFreq+0x20>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <MCAL_RCC_GetHCLKFreq+0x24>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08002608 	.word	0x08002608

08001f58 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)] );
 8001f5c:	f7ff ffe8 	bl	8001f30 <MCAL_RCC_GetHCLKFreq>
 8001f60:	4601      	mov	r1, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <MCAL_RCC_GetPCLK1Freq+0x24>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08002600 	.word	0x08002600

08001f80 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 11) & 0b111)] );
 8001f84:	f7ff ffd4 	bl	8001f30 <MCAL_RCC_GetHCLKFreq>
 8001f88:	4601      	mov	r1, r0
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0adb      	lsrs	r3, r3, #11
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08002600 	.word	0x08002600

08001fa8 <TIMER2_Init>:
#include "Stm32_F103C6_TIMER_driver.h"



void TIMER2_Init(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	// Enable clock for timer2
	RCC_TIMER2_CLK_EN();
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <TIMER2_Init+0x4c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <TIMER2_Init+0x4c>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	61d3      	str	r3, [r2, #28]

	// Choose a prescalar (8MHz/(7+1)=1MHz clock)
	TIMER2->PSC = 7;
 8001fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER2->ARR = 0xC350;  // 50000*1us = 0.05s
 8001fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER2->CR1 |= (1<<0);
 8001fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER2->SR) & (1<<0)));
 8001fda:	bf00      	nop
 8001fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f8      	beq.n	8001fdc <TIMER2_Init+0x34>
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <Delay_us>:




void Delay_us(int us)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	TIMER2->CNT = 0;
 8002000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER2->CNT) < us);
 8002008:	bf00      	nop
 800200a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	d3f9      	bcc.n	800200a <Delay_us+0x12>
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <Delay_ms>:



void Delay_ms(int ms)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e006      	b.n	800203c <Delay_ms+0x1c>
	{
		Delay_us(1000);
 800202e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002032:	f7ff ffe1 	bl	8001ff8 <Delay_us>
	for(i=0;i<ms;i++)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf4      	blt.n	800202e <Delay_ms+0xe>
	}
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <which_UART+0x38>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <which_UART+0x14>
		return 0;
 800205c:	2300      	movs	r3, #0
 800205e:	e00c      	b.n	800207a <which_UART+0x2e>
	else if(USARTx == USART2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <which_UART+0x3c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <which_UART+0x20>
		return 1;
 8002068:	2301      	movs	r3, #1
 800206a:	e006      	b.n	800207a <which_UART+0x2e>
	else if(USARTx == USART3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <which_UART+0x40>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <which_UART+0x2c>
		return 2;
 8002074:	2302      	movs	r3, #2
 8002076:	e000      	b.n	800207a <which_UART+0x2e>
	return 3;
 8002078:	2303      	movs	r3, #3
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40013800 	.word	0x40013800
 8002088:	40004400 	.word	0x40004400
 800208c:	40004800 	.word	0x40004800

08002090 <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a61      	ldr	r2, [pc, #388]	; (8002224 <MCAL_UART_Init+0x194>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10e      	bne.n	80020c0 <MCAL_UART_Init+0x30>
		Global_UART_Config[0] = *UARTCfg;
 80020a2:	4a61      	ldr	r2, [pc, #388]	; (8002228 <MCAL_UART_Init+0x198>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ae:	682b      	ldr	r3, [r5, #0]
 80020b0:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 80020b2:	4b5e      	ldr	r3, [pc, #376]	; (800222c <MCAL_UART_Init+0x19c>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	4a5d      	ldr	r2, [pc, #372]	; (800222c <MCAL_UART_Init+0x19c>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6193      	str	r3, [r2, #24]
 80020be:	e026      	b.n	800210e <MCAL_UART_Init+0x7e>
	}
	else if(USARTx == USART2){
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a5b      	ldr	r2, [pc, #364]	; (8002230 <MCAL_UART_Init+0x1a0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d10f      	bne.n	80020e8 <MCAL_UART_Init+0x58>
		Global_UART_Config[1] = *UARTCfg;
 80020c8:	4b57      	ldr	r3, [pc, #348]	; (8002228 <MCAL_UART_Init+0x198>)
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	f103 0414 	add.w	r4, r3, #20
 80020d0:	4615      	mov	r5, r2
 80020d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d6:	682b      	ldr	r3, [r5, #0]
 80020d8:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 80020da:	4b54      	ldr	r3, [pc, #336]	; (800222c <MCAL_UART_Init+0x19c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a53      	ldr	r2, [pc, #332]	; (800222c <MCAL_UART_Init+0x19c>)
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	e012      	b.n	800210e <MCAL_UART_Init+0x7e>
	}else if(USARTx == USART3){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <MCAL_UART_Init+0x1a4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10e      	bne.n	800210e <MCAL_UART_Init+0x7e>
		Global_UART_Config[2] = *UARTCfg;
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <MCAL_UART_Init+0x198>)
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80020f8:	4615      	mov	r5, r2
 80020fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <MCAL_UART_Init+0x19c>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a49      	ldr	r2, [pc, #292]	; (800222c <MCAL_UART_Init+0x19c>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	7a12      	ldrb	r2, [r2, #8]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	7a52      	ldrb	r2, [r2, #9]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	7a92      	ldrb	r2, [r2, #10]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	7ad2      	ldrb	r2, [r2, #11]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	615a      	str	r2, [r3, #20]

	// Configuration of Baud rate (BRR register)
	// PCLK1 for USART2,3
	// PCLK2 for USART1

	if(USARTx == USART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a30      	ldr	r2, [pc, #192]	; (8002224 <MCAL_UART_Init+0x194>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d103      	bne.n	8002170 <MCAL_UART_Init+0xe0>
	{
		Pclk = MCAL_RCC_GetPCLK2Freq();
 8002168:	f7ff ff0a 	bl	8001f80 <MCAL_RCC_GetPCLK2Freq>
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	e002      	b.n	8002176 <MCAL_UART_Init+0xe6>
	}else{
		Pclk = MCAL_RCC_GetPCLK1Freq();
 8002170:	f7ff fef2 	bl	8001f58 <MCAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	0119      	lsls	r1, r3, #4
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	441a      	add	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fbb2 f2f3 	udiv	r2, r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	2064      	movs	r0, #100	; 0x64
 80021a8:	fb00 f303 	mul.w	r3, r0, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	4a21      	ldr	r2, [pc, #132]	; (8002238 <MCAL_UART_Init+0x1a8>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	430b      	orrs	r3, r1
 80021be:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d026      	beq.n	800221c <MCAL_UART_Init+0x18c>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	7b12      	ldrb	r2, [r2, #12]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <MCAL_UART_Init+0x194>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d106      	bne.n	80021f2 <MCAL_UART_Init+0x162>
			NVIC_IRQ37_USART1_Enable;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MCAL_UART_Init+0x1ac>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <MCAL_UART_Init+0x1ac>)
 80021ea:	f043 0320 	orr.w	r3, r3, #32
 80021ee:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 80021f0:	e014      	b.n	800221c <MCAL_UART_Init+0x18c>
		else if(USARTx == USART2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <MCAL_UART_Init+0x1a0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d106      	bne.n	8002208 <MCAL_UART_Init+0x178>
			NVIC_IRQ38_USART2_Enable;
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <MCAL_UART_Init+0x1ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a0f      	ldr	r2, [pc, #60]	; (800223c <MCAL_UART_Init+0x1ac>)
 8002200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	e009      	b.n	800221c <MCAL_UART_Init+0x18c>
		else if(USARTx == USART3)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <MCAL_UART_Init+0x1a4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d105      	bne.n	800221c <MCAL_UART_Init+0x18c>
			NVIC_IRQ39_USART3_Enable;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <MCAL_UART_Init+0x1ac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a09      	ldr	r2, [pc, #36]	; (800223c <MCAL_UART_Init+0x1ac>)
 8002216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bdb0      	pop	{r4, r5, r7, pc}
 8002224:	40013800 	.word	0x40013800
 8002228:	20000054 	.word	0x20000054
 800222c:	40021000 	.word	0x40021000
 8002230:	40004400 	.word	0x40004400
 8002234:	40004800 	.word	0x40004800
 8002238:	51eb851f 	.word	0x51eb851f
 800223c:	e000e104 	.word	0xe000e104

08002240 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8002254:	bf00      	nop
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f9      	beq.n	8002256 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff fef2 	bl	800204c <which_UART>
 8002268:	4603      	mov	r3, r0
 800226a:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]
	}
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <MCAL_UART_SendString>:




void MCAL_UART_SendString(USART_Typedef * USARTx, uint8_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	4613      	mov	r3, r2
 800228a:	71fb      	strb	r3, [r7, #7]
    uint16_t DefaultStop = '\r';
 800228c:	230d      	movs	r3, #13
 800228e:	82bb      	strh	r3, [r7, #20]

    uint8_t i = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 8002294:	e00a      	b.n	80022ac <MCAL_UART_SendString+0x2e>
    {
        MCAL_UART_SendData(USARTx, &(pTxBuffer[i]), PollingEn);
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	4413      	add	r3, r2
 800229c:	79fa      	ldrb	r2, [r7, #7]
 800229e:	4619      	mov	r1, r3
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ffcd 	bl	8002240 <MCAL_UART_SendData>
        i++;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	3301      	adds	r3, #1
 80022aa:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ee      	bne.n	8002296 <MCAL_UART_SendString+0x18>
    }
    MCAL_UART_SendData(USARTx, &DefaultStop, PollingEn);
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ffbd 	bl	8002240 <MCAL_UART_SendData>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	4613      	mov	r3, r2
 80022dc:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 80022e4:	bf00      	nop
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f9      	beq.n	80022e6 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff feaa 	bl	800204c <which_UART>
 80022f8:	4603      	mov	r3, r0
 80022fa:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 80022fc:	7dfa      	ldrb	r2, [r7, #23]
 80022fe:	490f      	ldr	r1, [pc, #60]	; (800233c <MCAL_UART_ReceiveData+0x6c>)
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3309      	adds	r3, #9
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	b29b      	uxth	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	b29a      	uxth	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8002320:	e007      	b.n	8002332 <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	b29b      	uxth	r3, r3
 8002328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232c:	b29a      	uxth	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	801a      	strh	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000054 	.word	0x20000054

08002340 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <MCAL_UART_GPIO_SetPins+0xb8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d118      	bne.n	8002382 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8002350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002354:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8002356:	2306      	movs	r3, #6
 8002358:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	4825      	ldr	r0, [pc, #148]	; (80023fc <MCAL_UART_GPIO_SetPins+0xbc>)
 8002366:	f7ff fd17 	bl	8001d98 <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002370:	2308      	movs	r3, #8
 8002372:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	4619      	mov	r1, r3
 800237a:	4820      	ldr	r0, [pc, #128]	; (80023fc <MCAL_UART_GPIO_SetPins+0xbc>)
 800237c:	f7ff fd0c 	bl	8001d98 <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 8002380:	e036      	b.n	80023f0 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <MCAL_UART_GPIO_SetPins+0xc0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d116      	bne.n	80023b8 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800238a:	2304      	movs	r3, #4
 800238c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800238e:	2306      	movs	r3, #6
 8002390:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	4619      	mov	r1, r3
 800239c:	4817      	ldr	r0, [pc, #92]	; (80023fc <MCAL_UART_GPIO_SetPins+0xbc>)
 800239e:	f7ff fcfb 	bl	8001d98 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80023a2:	2308      	movs	r3, #8
 80023a4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80023a6:	2308      	movs	r3, #8
 80023a8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	4812      	ldr	r0, [pc, #72]	; (80023fc <MCAL_UART_GPIO_SetPins+0xbc>)
 80023b2:	f7ff fcf1 	bl	8001d98 <MCAL_GPIO_Init>
}
 80023b6:	e01b      	b.n	80023f0 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <MCAL_UART_GPIO_SetPins+0xc4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d117      	bne.n	80023f0 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80023c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80023c6:	2306      	movs	r3, #6
 80023c8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	4619      	mov	r1, r3
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <MCAL_UART_GPIO_SetPins+0xc8>)
 80023d6:	f7ff fcdf 	bl	8001d98 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80023da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023de:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80023e0:	2308      	movs	r3, #8
 80023e2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	4619      	mov	r1, r3
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <MCAL_UART_GPIO_SetPins+0xc8>)
 80023ec:	f7ff fcd4 	bl	8001d98 <MCAL_GPIO_Init>
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40010800 	.word	0x40010800
 8002400:	40004400 	.word	0x40004400
 8002404:	40004800 	.word	0x40004800
 8002408:	40010c00 	.word	0x40010c00

0800240c <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <USART1_IRQHandler+0x10>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4798      	blx	r3
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000054 	.word	0x20000054

08002420 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <USART2_IRQHandler+0x10>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	4798      	blx	r3
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000054 	.word	0x20000054

08002434 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8002438:	4b02      	ldr	r3, [pc, #8]	; (8002444 <USART3_IRQHandler+0x10>)
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	4798      	blx	r3
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000054 	.word	0x20000054

08002448 <__libc_init_array>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	2500      	movs	r5, #0
 800244c:	4e0c      	ldr	r6, [pc, #48]	; (8002480 <__libc_init_array+0x38>)
 800244e:	4c0d      	ldr	r4, [pc, #52]	; (8002484 <__libc_init_array+0x3c>)
 8002450:	1ba4      	subs	r4, r4, r6
 8002452:	10a4      	asrs	r4, r4, #2
 8002454:	42a5      	cmp	r5, r4
 8002456:	d109      	bne.n	800246c <__libc_init_array+0x24>
 8002458:	f000 f81a 	bl	8002490 <_init>
 800245c:	2500      	movs	r5, #0
 800245e:	4e0a      	ldr	r6, [pc, #40]	; (8002488 <__libc_init_array+0x40>)
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <__libc_init_array+0x44>)
 8002462:	1ba4      	subs	r4, r4, r6
 8002464:	10a4      	asrs	r4, r4, #2
 8002466:	42a5      	cmp	r5, r4
 8002468:	d105      	bne.n	8002476 <__libc_init_array+0x2e>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002470:	4798      	blx	r3
 8002472:	3501      	adds	r5, #1
 8002474:	e7ee      	b.n	8002454 <__libc_init_array+0xc>
 8002476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800247a:	4798      	blx	r3
 800247c:	3501      	adds	r5, #1
 800247e:	e7f2      	b.n	8002466 <__libc_init_array+0x1e>
 8002480:	08002618 	.word	0x08002618
 8002484:	08002618 	.word	0x08002618
 8002488:	08002618 	.word	0x08002618
 800248c:	0800261c 	.word	0x0800261c

08002490 <_init>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr

0800249c <_fini>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr
